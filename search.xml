<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Lint found fatal errors while assembling a release target</title>
    <url>/2020/11/23/apk-release-lint/</url>
    <content><![CDATA[<p><strong>转载文章 原文链接：<a href="https://www.jianshu.com/p/6b82ddbeab5d">https://www.jianshu.com/p/6b82ddbeab5d</a></strong></p>
<p>Android在debug模式下应用没有问题，但是在打包release版本时出现一下问题：</p>
<p><img src="/imgs/apk-release-lint-reason.webp"></p>
<p>提示中，关闭lint checkReleaseBuilds 的检查，可以这样实现：</p>
<p><img src="/imgs/1.webp"></p>
<p>虽然这样可以解决问题，但是没有解决根本问题。也就是说隐患依旧会存在。</p>
<p>lint 是代码检查，可以优化代码，发现一些潜在的bug，所以尽量不要关闭</p>
<p>这个错误报告会生成在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[app module]&#x2F;build&#x2F;reports&#x2F;lint-results-yourBuildName-fatal.html </span><br></pre></td></tr></table></figure>

<p>打开这个网页，一定要用浏览器打开。</p>
<p><img src="/imgs/2.webp"></p>
<p>这样错误就很明显了，改掉即可。</p>
]]></content>
      <categories>
        <category>Android开发问题汇总</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>release</tag>
        <tag>lint</tag>
      </tags>
  </entry>
  <entry>
    <title>APP架构搭建 - MVP基础版</title>
    <url>/2020/11/25/app-framework-mvp-base/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>快速完成APP框架的搭建，节约开发时间。系统的基本搭建，基本借助了优秀的第三方工具。第三方工具的选择，根据自身项目而定，需要利于项目后期的更新、迭代及相关维护。</p>
<blockquote>
<p>完成本文后，可对MVP框架有基本的认识。</p>
</blockquote>
<h1 id="1-Android开发框架MVP"><a href="#1-Android开发框架MVP" class="headerlink" title="1 Android开发框架MVP"></a>1 Android开发框架MVP</h1><p><a href="https://baike.baidu.com/item/MVP%E6%A8%A1%E5%BC%8F?fr=aladdin">百度百科 - MVP模式介绍</a></p>
<p><a href="https://blog.csdn.net/qq137722697/article/details/52212348">博客推荐 - 博主 - 大力-哥 -【android进阶篇】MVP+Retrofit+RxJava框架结合</a></p>
<p><a href="https://github.com/googlesamples/android-architecture">Google 关于 MVP 模式的介绍项目</a></p>
<h1 id="2-底部导航栏"><a href="#2-底部导航栏" class="headerlink" title="2 底部导航栏"></a>2 底部导航栏</h1><p><a href="https://blog.csdn.net/afei__/article/details/80950288">博客推荐 - 博主 - 阿飞__ - Android底部导航栏，三种风格和实现</a></p>
<p><a href="https://blog.csdn.net/qq_32770809/article/details/79093158">博客推荐 - 博主 - cc_wentian - Android底部导航栏最常用的两种写法</a></p>
<p><a href="https://www.cnblogs.com/yelanggu/p/9516429.html">博客推荐 - 博主- 野狼谷 - Android (争取做到)最全的底部导航栏实现方法</a></p>
<p><a href="https://blog.csdn.net/tiandixuanwuliang/article/details/56279956">博客推荐 - 博主 - 天地炫舞 - LinearLayout+Fragment实现下导航栏效果</a></p>
<h1 id="3-BaseActivity基类设计"><a href="#3-BaseActivity基类设计" class="headerlink" title="3 BaseActivity基类设计"></a>3 BaseActivity基类设计</h1><p><a href="https://www.jianshu.com/p/289dfb1a839a">博客推荐 - 博主 - 吾非言 -【Android】BaseActivity基类设计</a></p>
<h1 id="4-日志管理"><a href="#4-日志管理" class="headerlink" title="4 日志管理"></a>4 日志管理</h1><h2 id="4-1-Klog"><a href="#4-1-Klog" class="headerlink" title="4.1 Klog"></a>4.1 Klog</h2><p>使用方法：<a href="https://blog.csdn.net/m0_37705108/article/details/85047441">博客推荐 - 博主 - 熊旭川 - Klog的使用</a></p>
<p>项目地址：<a href="https://github.com/ZhaoKaiQiang/KLog">https://github.com/ZhaoKaiQiang/KLog</a></p>
<h1 id="5-标题栏"><a href="#5-标题栏" class="headerlink" title="5 标题栏"></a>5 标题栏</h1><p><a href="https://www.jianshu.com/p/36fc921ab0b1">博客推荐 - 博主 - lovesosoi - Android 去掉标题栏的真正使用方式</a></p>
<h1 id="6-侧滑返回"><a href="#6-侧滑返回" class="headerlink" title="6 侧滑返回"></a>6 侧滑返回</h1><h2 id="6-1-swipeback-android-侧滑返回控件"><a href="#6-1-swipeback-android-侧滑返回控件" class="headerlink" title="6.1 swipeback-android 侧滑返回控件"></a>6.1 swipeback-android 侧滑返回控件</h2><p>侧滑返回控件，支持右滑手势以及下拉手势</p>
<p>项目地址：<a href="https://github.com/1004145468/swipeback-android">https://github.com/1004145468/swipeback-android</a></p>
<h1 id="7-网络请求框架"><a href="#7-网络请求框架" class="headerlink" title="7 网络请求框架"></a>7 网络请求框架</h1><h2 id="7-1-Retrofit"><a href="#7-1-Retrofit" class="headerlink" title="7.1 Retrofit"></a>7.1 Retrofit</h2><p><a href="https://www.jianshu.com/p/0fda3132cf98">博客推荐 - 博主 - SHERLOCKvv - 网络加载框架 - Retrofit</a></p>
<p><a href="https://www.jianshu.com/p/a3e162261ab6">博客推荐 - 博主 - Carson_Ho - Android Retrofit 2.0 的详细使用攻略（含实例讲解）</a></p>
<p><a href="https://www.jianshu.com/p/2c54f9ccd52f">博客推荐 - 博主 - Carson_Ho - Android：Retrofit 结合 RxJava的优雅使用（含实例教程）</a></p>
<p><a href="https://blog.csdn.net/weixin_37577039/article/details/79495797">博客推荐 - 博主 - 5ingwings - Retrofit2.0（三）封装：如超时设置，加请求头，加公共请求参数，加拦截器等</a></p>
<p><a href="https://blog.csdn.net/ding_GC/article/details/80492229">博客推荐 - 博主 - ding_GC - Retrofit 拦截器-基础公共参数拦截器实现</a></p>
<p><a href="https://blog.csdn.net/u014624241/article/details/77069712">博客推荐 - 博主 - 不对法 - retrofit http取消请求</a></p>
<h2 id="7-2-okhttp-RxHttp"><a href="#7-2-okhttp-RxHttp" class="headerlink" title="7.2 okhttp-RxHttp"></a>7.2 okhttp-RxHttp</h2><p>项目地址：<a href="https://github.com/liujingxing/okhttp-RxHttp">https://github.com/liujingxing/okhttp-RxHttp</a></p>
<h2 id="7-3-图片上传"><a href="#7-3-图片上传" class="headerlink" title="7.3 图片上传"></a>7.3 图片上传</h2><p><a href="https://blog.csdn.net/q6978541/article/details/89512544">博客推荐 - 博主 - q6978541 - Retrofit2 上传图片(服务器端+Android端)</a></p>
<p><a href="https://www.jianshu.com/p/a330b0df54ae">博客推荐 - Android Retrofit 实现（图文上传）文字（参数）和多张图片一起上传</a></p>
<h1 id="8-沉浸式开发"><a href="#8-沉浸式开发" class="headerlink" title="8 沉浸式开发"></a>8 沉浸式开发</h1><h2 id="8-1-ImmersionBar-沉浸式状态栏和沉浸式导航栏管理"><a href="#8-1-ImmersionBar-沉浸式状态栏和沉浸式导航栏管理" class="headerlink" title="8.1 ImmersionBar 沉浸式状态栏和沉浸式导航栏管理"></a>8.1 ImmersionBar 沉浸式状态栏和沉浸式导航栏管理</h2><p>android 4.4以上沉浸式状态栏和沉浸式导航栏管理，适配横竖屏切换、刘海屏、软键盘弹出等问题，可以修改状态栏字体颜色和导航栏图标颜色，以及不可修改字体颜色手机的适配，适用于Activity、Fragment、DialogFragment、Dialog，PopupWindow，一句代码轻松实现，以及对bar的其他设置。</p>
<p>使用方法：<a href="https://www.jianshu.com/p/2a884e211a62">博客推荐 - 博主 - HeLe小子拽 - android4.4以上沉浸式状态栏和导航栏实现以及Bar的其他管理</a></p>
<p>项目地址：<a href="https://github.com/gyf-dev/ImmersionBar">https://github.com/gyf-dev/ImmersionBar</a></p>
<h1 id="9-数据库管理"><a href="#9-数据库管理" class="headerlink" title="9 数据库管理"></a>9 数据库管理</h1><h2 id="9-1-GreenDao"><a href="#9-1-GreenDao" class="headerlink" title="9.1 GreenDao"></a>9.1 GreenDao</h2><p><a href="https://blog.csdn.net/scorpio_gao/article/details/53048699">博客推荐 - 博主 - 大城小小爱 - GreenDao:3.2.0用法</a></p>
<p><a href="https://www.jianshu.com/p/dfdd3c0896b3">博客推荐 - 博主 - 闲庭CC - GreenDao3.0简单使用</a></p>
<p><a href="https://www.jianshu.com/p/82d7c0bc7abd">博客推荐 - 博主 - 闲庭CC - GreenDao设置数据库路径以及数据库升级</a></p>
<h2 id="9-2-LitePal"><a href="#9-2-LitePal" class="headerlink" title="9.2 LitePal"></a>9.2 LitePal</h2><p>使用方法：<a href="https://blog.csdn.net/sinyu890807/column/info/android-database-pro">博客推荐 - 博主 - guolin - SQLite中一些不为人知的使用技巧，以及全面剖析 LitePal 这款Android数据库框架的所有用法</a></p>
<p>项目地址：<a href="https://github.com/LitePalFramework/LitePal">https://github.com/LitePalFramework/LitePal</a></p>
<h1 id="10-事件分发处理"><a href="#10-事件分发处理" class="headerlink" title="10 事件分发处理"></a>10 事件分发处理</h1><h2 id="10-1-EventBus"><a href="#10-1-EventBus" class="headerlink" title="10.1 EventBus"></a>10.1 EventBus</h2><p>项目地址：<a href="https://github.com/greenrobot/EventBus">https://github.com/greenrobot/EventBus</a></p>
<h1 id="11-图片加载"><a href="#11-图片加载" class="headerlink" title="11 图片加载"></a>11 图片加载</h1><h2 id="11-1-Glide"><a href="#11-1-Glide" class="headerlink" title="11.1 Glide"></a>11.1 Glide</h2><p>使用方法：<a href="https://blog.csdn.net/sinyu890807/column/info/15318">博客推荐 - 博主 - guolin - Glide最全解析</a></p>
<p>使用方法：<a href="https://www.cnblogs.com/guilin-hu/p/5706916.html">博客推荐 - 博主 - 遗失的流年 - roid图片加载框架Glide用法</a></p>
<p>GitHub：<a href="https://github.com/wasabeef/glide-transformations">glide-transformations实现图片变换</a></p>
]]></content>
      <categories>
        <category>AA博客导航AA</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>APP架构搭建</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 更换 APP Logo 无效问题处理</title>
    <url>/2020/11/24/app-logo-invalid/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在 AndroidManifest.xml 文件中，修改 APP logo 后，桌面显示的图标还是以前的图标，新修改的 logo 未生效</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>确保修改 logo 的方式正确</p>
<p>正常情况下，APP logo 修改无效的情况是不会出现的</p>
<p>楼主使用的测试机是被刷机过的，导致某些系统文件缺失</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在手机系统【设置】中，找到【应用程序】，并找到安装的应用，点击【清除数据】，再点击【清除缓存】，然后将应用卸载。</p>
<blockquote>
<p>每个品牌手机清除应用数据的方式或菜单可能不一样，但原理都是一样的，即将应用的全部数据清除，然后再将应用卸载。</p>
</blockquote>
<p>打开开发项目，先将项目【clean】，然后再【rebuild】，之后重新向手机安装应用即可。</p>
]]></content>
      <categories>
        <category>Android开发问题汇总</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>logo</tag>
        <tag>app</tag>
        <tag>logo更换无效</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac终端常用命令</title>
    <url>/2020/11/24/apple-cmd/</url>
    <content><![CDATA[<p>以下是小编常用的命令，更多命令可自行百度，最简单的方式是：在终端中使用 help 帮助命令</p>
<p>1、pwd：终端当前的工作路径</p>
<p>2、ls：显示当前工作路径下的所有文件夹和文件</p>
<p>3、ls -l：以详细信息的形式显示当前工作路径下的所有文件夹和文件</p>
<p>4、cd Applications：切换终端的工作路径为/Users/ZhaiKun/Applications，cd + 终端需要进入的工作路径</p>
<p>5、Tab建的使用：Tab建可作为系统已经存在的默认路径的自动补全，如 Applications 文件夹，输入前几个（字符个数不定）关键字母（App），再按下Tab建，即可自动完成Applications 的完整拼写</p>
<p>6、cd ..：回退到当前工作路径的父路径</p>
<p>7、mkdir 文件夹名称：在当前的工作路径下创建一个新的文件夹</p>
<p>8、clear：清除终端界面上的命令信息</p>
<p>9、touch 文件名称（注意增加文件的后缀名）：在当前工作路径新建一个文件，我们知道，在 Mac 的 Finder 中是不能新建文件的，使用该命令即可新建一个文件</p>
<p>10、cc：任意工作路径下输入此命令，可检测系统是否装有 C 语言的开发环境</p>
<p>11、cc -c C语言源文件名（加后缀名）：在终端中编译C语言文件，编译成功后可生成源文件（xxx.c）对应的机器文件（xxx.o 二进制文件），这个xxx.o的二进制文件是不能直接运行的</p>
<p>编译前</p>
<p><img src="/imgs/41.png"></p>
<p>cc -c firstC.c 命令编译后</p>
<p><img src="/imgs/42.png"></p>
<p>12、cc C语言源文件编译过后的二进制文件（xxx.o）：cc xxx.o 在这个二进制文件中增加C语言平台的启动代码，成功后生成a.out文件，该文件可以直接被CPU识别运行</p>
<p>cc firstC.o 命令执行后</p>
<p><img src="/imgs/43.png"></p>
<p>13、./a.out：执行a.out文件（ ./ 代表当前目录）</p>
]]></content>
      <categories>
        <category>CMD终端命令</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>终端</tag>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS网络请求错误nw_proxy_resolver_create_parsed_array PAC evaluation error:NSURLErrorDomain:-1004</title>
    <url>/2020/11/24/apple-http-1004/</url>
    <content><![CDATA[<p>在发起一个网络请求时，出现错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nw_proxy_resolver_create_parsed_array PAC evaluation error: NSURLErrorDomain: -1004</span><br></pre></td></tr></table></figure>

<p>这主要是在Mac系统中设置了网络自动代理而导致</p>
<p>解决方案：系统偏好设置 → 网络 → 高级 → 代理 → 取消自动代理配置</p>
]]></content>
      <categories>
        <category>Apple开发问题汇总</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>网络</tag>
        <tag>-1004</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS中配置JDK环境变量</title>
    <url>/2020/11/24/apple-jdk/</url>
    <content><![CDATA[<p>macOS中JDK安装路径：</p>
<p>OSX默认的JDK<br>/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home</p>
<p>这其实是一个符号链接，它指向：</p>
<p>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</p>
<p>OS X自带的JRE<br>/System/Library/Frameworks/JavaVM.framework/Versions/Current</p>
<p>ORACLE的JDK7<br>/Library/Java/JavaVirtualMachines/jdk1.7.0_xx.jdk/Contents/Home</p>
<p>ORACLE的JRE7<br>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</p>
<p>OPENJDK7<br>/Library/Java/JavaVirtualMachines/jdk1.7.0.jdk/Contents/Home</p>
<p>配置过程：</p>
<p>1、启动终端，可以在Spotlight中搜索“终端”</p>
<p>2、进入当前用户的HOME目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<p>3、创建“.bash_profile”文件（当该文件不存在时），如果文件已存在，直接打开文件即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure>

<p>4、打开.bash_profile文件，对其内容进行编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure>

<p>5、此时文本编辑器会打开一个文本，增加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk-10.0.1.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line">CLASSPAHT&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export CLASSPATH</span><br><span class="line">export PATH</span><br><span class="line">JAVA_HOME为JDK安装路径</span><br></pre></td></tr></table></figure>

<p>6、保存文件，关闭.bash_profile</p>
<p>7、更新刚配置的环境变量，在终端执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>

<p>8、验证配置是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appledeMac-mini:~ zhaikun$ java -version</span><br><span class="line">java version &quot;10.0.1&quot; 2018-04-17</span><br><span class="line">Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)</span><br></pre></td></tr></table></figure>

<p>JDK环境变量配置路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appledeMac-mini:~ zhaikun$ echo $JAVA_HOME</span><br><span class="line">&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk-10.0.1.jdk&#x2F;Contents&#x2F;Home</span><br></pre></td></tr></table></figure>

<p>以上配置只能在当前用户中使用</p>
<p>参考文档：<a href="https://www.cnblogs.com/cuiliang/p/4603762.html">https://www.cnblogs.com/cuiliang/p/4603762.html</a></p>
<p>参考文档：<a href="https://blog.csdn.net/binbinzheng/article/details/46621639">https://blog.csdn.net/binbinzheng/article/details/46621639</a></p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>JDK</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中NTFS格式文件的读写</title>
    <url>/2020/11/24/apple-ntfs/</url>
    <content><![CDATA[<p>在Mac中是不支持NTFS文件的读写的，我们可以在Mac中安装 Tuxera NTFS 软件，之后便可对NTFS格式的文件进行读写操作。</p>
<p>Tuxera NTFS 自行百度下载安装即可。</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>iOS</tag>
        <tag>NTFS格式文件读写</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中类的声明与实现</title>
    <url>/2020/11/24/apple-oc-class-sm/</url>
    <content><![CDATA[<h1 id="类的声明和实现语法"><a href="#类的声明和实现语法" class="headerlink" title="类的声明和实现语法"></a>类的声明和实现语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassDemo 类</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 类：具有相同特征和行为的对象的集合</span><br><span class="line"> 对象：个人的理解是 万物皆对象</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的声明</span><br><span class="line">&#x2F;&#x2F;Person 类名 首字母大写</span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的实现</span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类的属性-特征"><a href="#类的属性-特征" class="headerlink" title="类的属性/特征"></a>类的属性/特征</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassDemo 类</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 类：具有相同特征和行为的对象的集合</span><br><span class="line"> 对象：个人的理解是 万物皆对象</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的声明</span><br><span class="line">&#x2F;&#x2F;Person 类名 首字母大写</span><br><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;类的属性定义在 &#123; &#125; 中</span><br><span class="line">    NSString *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的实现</span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类属性的调用"><a href="#类属性的调用" class="headerlink" title="类属性的调用"></a>类属性的调用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassDemo 类</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 类：具有相同特征和行为的对象的集合</span><br><span class="line"> 对象：个人的理解是 万物皆对象</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的声明</span><br><span class="line">&#x2F;&#x2F;Person 类名 首字母大写</span><br><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;类的属性定义在 &#123; &#125; 中</span><br><span class="line">    @public</span><br><span class="line">    NSString *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的实现</span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Person *person &#x3D; [Person new];&#x2F;&#x2F;类的一个实例对象，类的每一个对象是各不相同的</span><br><span class="line">        &#x2F;&#x2F;person-&gt;name &#x3D; @&quot;类属性的调用&quot;;</span><br><span class="line">        (*person).name &#x3D; @&quot;类属性的另一种调用方式&quot;;</span><br><span class="line">        NSLog(@&quot;%@&quot;, person-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类行为（方法或函数，就是某一个功能的实现）的声明、实现与调用"><a href="#类行为（方法或函数，就是某一个功能的实现）的声明、实现与调用" class="headerlink" title="类行为（方法或函数，就是某一个功能的实现）的声明、实现与调用"></a>类行为（方法或函数，就是某一个功能的实现）的声明、实现与调用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassDemo 类</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 类：具有相同特征和行为的对象的集合</span><br><span class="line"> 对象：个人的理解是 万物皆对象</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的声明</span><br><span class="line">&#x2F;&#x2F;Person 类名 首字母大写</span><br><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;类的属性定义在 &#123; &#125; 中</span><br><span class="line">@public</span><br><span class="line">    NSString *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法的声明</span><br><span class="line">- (void)noParamMethod;&#x2F;&#x2F;声明一个 返回值为空void 无参数 名为noParamMethod的方法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带有一个参数的方法</span><br><span class="line">- (void)oneParamMethod:(NSString *)nameParam;&#x2F;&#x2F;声明一个 返回值为空void 参数类型为NSString * 参数名为name 名为oneParamMethod的方法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带多个参数的方法</span><br><span class="line">- (void)paramsMethod:(int)age1 :(int)age2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在类方法的实现中，可以直接访问类的属性</span><br><span class="line">- (int)classSelfParamMethod;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类的实现</span><br><span class="line">@implementation Person</span><br><span class="line">&#x2F;&#x2F;方法的实现</span><br><span class="line">- (void)noParamMethod&#123;</span><br><span class="line">    NSLog(@&quot;noParamMethod方法的实现&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)oneParamMethod:(NSString *)nameParam&#123;</span><br><span class="line">    nameParam &#x3D; @&quot;带有一个参数的方法&quot;;</span><br><span class="line">    NSLog(@&quot;%@&quot;, nameParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)paramsMethod:(int)age1 :(int)age2&#123;</span><br><span class="line">    NSLog(@&quot;多个参数的方法：%d&quot;, age1+age2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (int)classSelfParamMethod&#123;</span><br><span class="line">    age &#x3D; 18;</span><br><span class="line">    return age;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Person *person &#x3D; [Person new];&#x2F;&#x2F;类的一个实例对象，类的每一个对象是各不相同的，类中的属性和方法必须通过类的实例对象进行调用</span><br><span class="line">        &#x2F;&#x2F;person-&gt;name &#x3D; @&quot;类属性的调用&quot;;</span><br><span class="line">        (*person).name &#x3D; @&quot;类属性的另一种调用方式&quot;;</span><br><span class="line">        NSLog(@&quot;%@&quot;, person-&gt;name);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;方法的调用</span><br><span class="line">        [person noParamMethod];</span><br><span class="line">        [person oneParamMethod:@&quot;&quot;];</span><br><span class="line">        [person paramsMethod:1 :2];</span><br><span class="line">        NSLog(@&quot;在方法中直接调用类的属性：%d&quot;, [person classSelfParamMethod]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>class</tag>
        <tag>类</tag>
        <tag>属性</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS中安装node.js</title>
    <url>/2020/11/24/apple-node/</url>
    <content><![CDATA[<p>node.js最新版下载地址：<a href="https://nodejs.org/en/#download">https://nodejs.org/en/#download</a></p>
<p><img src="/imgs/38.png"></p>
<p>双击运行以上文件，安装过程直接下一步即可。安装后显示：</p>
<p><img src="/imgs/39.png"></p>
<p>node.js和npm安装成功测试，在终端输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appledeMac-mini:~ zhaikun$ node -v</span><br><span class="line">v10.1.0</span><br><span class="line">appledeMac-mini:~ zhaikun$ npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>node.js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中类是如何存储在内存中的</title>
    <url>/2020/11/24/apple-oc-class/</url>
    <content><![CDATA[<h1 id="内存的五大区域"><a href="#内存的五大区域" class="headerlink" title="内存的五大区域"></a>内存的五大区域</h1><p>堆 手动申请的字节空间</p>
<p>栈 存储局部变量</p>
<p>BSS段 存储未被初始化的全局变量、静态变量</p>
<p>数据段（常量区） 存储已经被初始化的全局变量、静态变量、常量数据</p>
<p>代码段 存储代码</p>
<h1 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h1><p>在程序的执行过程中，当类被首次访问（在声明类的指针变量或创建实例对象的时候）时，会将类的声明与实现的代码存储在内存的代码段中。类的加载只会被执行一次。当程序运行结束后，才会释放内存空间。</p>
<h1 id="类的存储"><a href="#类的存储" class="headerlink" title="类的存储"></a>类的存储</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassLoadDemo 类在内存中的存储</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    @public</span><br><span class="line">    NSString *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)helloWorld;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">-(void)helloWorld&#123;</span><br><span class="line">    NSLog(@&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;1、声明一个Person类型的局部变量person，在内存的栈中分配一片空间给person，指针变量person所指向的内存空间存储的是一个地址</span><br><span class="line">    Person *person;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;2、在堆内存中创建Person的一个实例对象person</span><br><span class="line">    &#x2F;&#x2F;a、在堆内存中申请一片适合Person对象大小的空间</span><br><span class="line">    &#x2F;&#x2F;b、在该内存中根据Person类的模板创建对象：将类中定义的属性声明在对象中（没有方法），在该片存储空间中的person对象有一个默认的属性isa，isa是一个指针，指向person对象的所属类Person在内存的代码段中的存储地址</span><br><span class="line">    &#x2F;&#x2F;c、初始化对象的属性：基本数据类型---0，C语言的指针类型---NULL，OC的类指针类型---nil</span><br><span class="line">    &#x2F;&#x2F;d、返回Person类的实例对象person的地址</span><br><span class="line">    person &#x3D; [Person new];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;3、属性调用：根据person指针所指向的地址，找到堆内存中创建的对象，再找到age属性</span><br><span class="line">    person-&gt;age &#x3D; 18;</span><br><span class="line">    NSLog(@&quot;%d&quot;, person-&gt;age);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;4、方法的调用：根据person指针所指向的地址，找到堆内存中创建的对象，再找到isa属性，通过isa指向的地址空间，调用存储在内存的代码段中的类的方法</span><br><span class="line">    [person helloWorld];</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%@&quot;, person);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看完之后呢，有个小小的疑问，为什么类中的方法没有存储在对象中？</p>
<p>当在创建多个对象时，每一个对象中的方法是相同的，重复创建对象中的方法造成了空间的浪费，直接将方法存储在了代码段中的类中，每一个被创建的对象的isa指针属性指向了代码段中的类，再通过类找到方法，节省了内存空间。</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>内存</tag>
        <tag>对象</tag>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中异常处理</title>
    <url>/2020/11/24/apple-oc-exception/</url>
    <content><![CDATA[<p>何为异常？</p>
<p>我的简单理解是：程序可以编译、运行，但是在某些特定的执行环境下会导致程序运行终止，也就是我们常说的崩溃或者闪退现象。</p>
<p>如何处理？</p>
<p>我们要抓住这个导致程序运行终止的代码，然后采取合理的方式将其处理掉。Objective-C提供了异常的处理机制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@try &#123;</span><br><span class="line">    &lt;#Code that can potentially throw an exception#&gt;</span><br><span class="line">&#125; @catch (NSException *exception) &#123;</span><br><span class="line">    &lt;#Handle an exception thrown in the @try block#&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有如下例子：</p>
<p>1、接下来，我们定义一个Person类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.h</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">- (void)run;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>在Person类中声明了一个run方法</p>
<p>2、再看Person类的实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.m</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>在Person类的实现代码中，没有实现run方法</p>
<p>3、接下来在程序的入口函数中对run方法进行调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ExceptionDeal 异常处理</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    Person *person &#x3D; [Person new];</span><br><span class="line">    [person run];</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;程序执行到了这里&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行到[person run]时，就终止了运行，调试信息显示：run方法声明了，但是没有实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 10:03:53.177952+0800 ExceptionDeal[812:23032] -[Person run]: unrecognized selector sent to instance 0x100406730</span><br><span class="line">2017-10-11 10:03:53.178930+0800 ExceptionDeal[812:23032] *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;-[Person run]: unrecognized selector sent to instance 0x100406730&#39;</span><br><span class="line">*** First throw call stack:</span><br><span class="line">(</span><br><span class="line">	0   CoreFoundation                      0x00007fffb6f012cb __exceptionPreprocess + 171</span><br><span class="line">	1   libobjc.A.dylib                     0x00007fffcbd1948d objc_exception_throw + 48</span><br><span class="line">	2   CoreFoundation                      0x00007fffb6f82f04 -[NSObject(NSObject) doesNotRecognizeSelector:] + 132</span><br><span class="line">	3   CoreFoundation                      0x00007fffb6e73755 ___forwarding___ + 1061</span><br><span class="line">	4   CoreFoundation                      0x00007fffb6e732a8 _CF_forwarding_prep_0 + 120</span><br><span class="line">	5   ExceptionDeal                       0x0000000100000f26 main + 70</span><br><span class="line">	6   libdyld.dylib                       0x00007fffcc5ff235 start + 1</span><br><span class="line">	7   ???                                 0x0000000000000001 0x0 + 1</span><br><span class="line">)</span><br><span class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure>
<p>4、对这个异常进行处理，使程序可以继续运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ExceptionDeal 异常处理</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    Person *person &#x3D; [Person new];</span><br><span class="line">    </span><br><span class="line">    @try &#123;</span><br><span class="line">        &#x2F;&#x2F;将可能发生异常的代码写在@try块中</span><br><span class="line">        [person run];&#x2F;&#x2F;一旦发生异常，立即执行@catch块中的代码，不会执行@try块中发生异常代码处之后的代码</span><br><span class="line">        NSLog(@&quot;我是处于异常后面的代码&quot;);</span><br><span class="line">    &#125; @catch (NSException *exception) &#123;</span><br><span class="line">        &#x2F;&#x2F;确定异常已经发生，执行@catch块中的代码。如果@try块中的代码没有发生异常，是不会执行@catch块中的代码的</span><br><span class="line">        NSLog(@&quot;这里是处理异常&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;程序执行到了这里&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 10:22:36.727478+0800 ExceptionDeal[913:27826] -[Person run]: unrecognized selector sent to instance 0x1002032b0</span><br><span class="line">2017-10-11 10:22:36.728071+0800 ExceptionDeal[913:27826] 这里是处理异常</span><br><span class="line">2017-10-11 10:22:36.728109+0800 ExceptionDeal[913:27826] 程序执行到了这里</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>
<p>5、验证没有异常时不会执行@catch块中的代码，实现Person类中的run方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.m</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">- (void)run&#123;</span><br><span class="line">    NSLog(@&quot;实现了run方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 10:29:33.763648+0800 ExceptionDeal[967:29474] 实现了run方法</span><br><span class="line">2017-10-11 10:29:33.763909+0800 ExceptionDeal[967:29474] 我是处于异常后面的代码</span><br><span class="line">2017-10-11 10:29:33.763935+0800 ExceptionDeal[967:29474] 程序执行到了这里</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>
<p>在@try块中，没有异常时，依次执行了@try块中的所有代码，直接跳过了@catch块</p>
<p>6、@catch块参数说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@catch (NSException *exception) &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>exception 指针对象，通过它可以拿到发生异常的原因。添加打印异常信息的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@catch (NSException *exception) &#123;</span><br><span class="line">    &#x2F;&#x2F;确定异常已经发生，执行@catch块中的代码。如果@try块中的代码没有发生异常，是不会执行@catch块中的代码的</span><br><span class="line">    NSLog(@&quot;这里是处理异常&quot;);</span><br><span class="line">    NSLog(@&quot;发生异常的原因：%@&quot;, exception);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 10:45:46.946998+0800 ExceptionDeal[1044:33191] -[Person run]: unrecognized selector sent to instance 0x100504590</span><br><span class="line">2017-10-11 10:45:46.947636+0800 ExceptionDeal[1044:33191] 这里是处理异常</span><br><span class="line">2017-10-11 10:45:46.947709+0800 ExceptionDeal[1044:33191] 发生异常的原因：-[Person run]: unrecognized selector sent to instance 0x100504590</span><br><span class="line">2017-10-11 10:45:46.947741+0800 ExceptionDeal[1044:33191] 程序执行到了这里</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>
<p>7、@finally处理机制说明：位于@try{ }@catch{ }的后面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@try &#123;</span><br><span class="line">    &lt;#Code that can potentially throw an exception#&gt;</span><br><span class="line">&#125; @catch (NSException *exception) &#123;</span><br><span class="line">    &lt;#Handle an exception thrown in the @try block#&gt;</span><br><span class="line">&#125; @finally &#123;</span><br><span class="line">    &lt;#Code that gets executed whether or not an exception is thrown#&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在入口函数中增加@finally块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ExceptionDeal 异常处理</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    Person *person &#x3D; [Person new];</span><br><span class="line"></span><br><span class="line">    @try &#123;</span><br><span class="line">        &#x2F;&#x2F;将可能发生异常的代码写在@try块中</span><br><span class="line">        [person run];&#x2F;&#x2F;一旦发生异常，立即执行@catch块中的代码，不会执行@try块中发生异常代码处之后的代码</span><br><span class="line">        NSLog(@&quot;我是处于异常后面的代码&quot;);</span><br><span class="line">    &#125; @catch (NSException *exception) &#123;</span><br><span class="line">        &#x2F;&#x2F;确定异常已经发生，执行@catch块中的代码。如果@try块中的代码没有发生异常，是不会执行@catch块中的代码的</span><br><span class="line">        NSLog(@&quot;这里是处理异常&quot;);</span><br><span class="line">        NSLog(@&quot;发生异常的原因：%@&quot;, exception);</span><br><span class="line">    &#125;@finally &#123;</span><br><span class="line">        &#x2F;&#x2F;无论@try块中是否有异常，都会执行这里的代码</span><br><span class="line">        NSLog(@&quot;I am finally！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;程序执行到了这里&quot;);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模拟发生异常时的运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 10:57:44.240396+0800 ExceptionDeal[1141:36516] -[Person run]: unrecognized selector sent to instance 0x100202330</span><br><span class="line">2017-10-11 10:57:44.241212+0800 ExceptionDeal[1141:36516] 这里是处理异常</span><br><span class="line">2017-10-11 10:57:44.241259+0800 ExceptionDeal[1141:36516] 发生异常的原因：-[Person run]: unrecognized selector sent to instance 0x100202330</span><br><span class="line">2017-10-11 10:57:44.241286+0800 ExceptionDeal[1141:36516] I am finally！</span><br><span class="line">2017-10-11 10:57:44.241301+0800 ExceptionDeal[1141:36516] 程序执行到了这里</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>
<p>模拟没有异常出现时的运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 10:58:37.252254+0800 ExceptionDeal[1177:36918] 实现了run方法</span><br><span class="line">2017-10-11 10:58:37.252422+0800 ExceptionDeal[1177:36918] 我是处于异常后面的代码</span><br><span class="line">2017-10-11 10:58:37.252447+0800 ExceptionDeal[1177:36918] I am finally！</span><br><span class="line">2017-10-11 10:58:37.252465+0800 ExceptionDeal[1177:36918] 程序执行到了这里</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>
<p>得出结论：无论在@try块中是否有异常，程序最终都会执行@finally块中的代码</p>
<p>注意：@try、、、@catch对异常的处理是有一定的局限性的，也就是说这个东东是不能处理所有的异常的，典型的例子就是做除法运算时分母为0的情况。那么我们又怎么样对它不能处理的异常进行处理呢？推荐的方法是：进行逻辑判断处理。</p>
]]></content>
      <categories>
        <category>Apple开发问题汇总</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中编程小技巧</title>
    <url>/2020/11/24/apple-oc-jq/</url>
    <content><![CDATA[<p>1、分组导航</p>
<p>实现在同一个文件中，代码的快速定位。有如下代码文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  GroupNavigationMark 分组导航标记</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Students : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Students</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Bird : NSObject</span><br><span class="line"></span><br><span class="line">- (void)fly;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Bird</span><br><span class="line"></span><br><span class="line">-(void)fly&#123;</span><br><span class="line">    NSLog(@&quot;我会飞&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Cat : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Cat</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Apple : NSObject</span><br><span class="line"></span><br><span class="line">- (void)red;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Apple</span><br><span class="line"></span><br><span class="line">-(void)red&#123;</span><br><span class="line">    NSLog(@&quot;我是红色的&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Bananer : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Bananer</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果文件中的代码不断的增加，那么在查找文件中的某一个类或者方法等就没有那么方便了。在文件的顶部，有一个文件的导航：</p>
<p><img src="/imgs/19.png"></p>
<p>点击No Selection，显示当前文件中相关的类、方法等，可快速定位</p>
<p><img src="/imgs/20.png"></p>
<p>为分组栏添加标记，使用#pragma mark x 语法，根据需求增加代码即可</p>
<p><img src="/imgs/21.png"></p>
<p>小编在此处将代码做如下修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  GroupNavigationMark 分组导航标记</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">#pragma mark - 人类</span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Students : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Students</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#pragma mark - 动物类</span><br><span class="line">@interface Bird : NSObject</span><br><span class="line"></span><br><span class="line">- (void)fly;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Bird</span><br><span class="line"></span><br><span class="line">-(void)fly&#123;</span><br><span class="line">    NSLog(@&quot;我会飞&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Cat : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Cat</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#pragma mark - 食物类</span><br><span class="line">@interface Apple : NSObject</span><br><span class="line"></span><br><span class="line">- (void)red;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Apple</span><br><span class="line"></span><br><span class="line">-(void)red&#123;</span><br><span class="line">    NSLog(@&quot;我是红色的&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Bananer : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Bananer</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#pragma mark - 程序入口函数</span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果</p>
<p><img src="/imgs/22.png"></p>
<p>2、牛逼哄哄的你可能会忘记的小细节</p>
<p>2.1 类的声明@interface与类的实现@implementation不能嵌套使用</p>
<p>2.2 类必须先声明再实现</p>
<p>2.3 类的声明与实现必须同时存在。特殊情况下，可以没有声明，而只有实现，但不推荐这种写法</p>
<p>2.4 类的声明必须放在使用该类的语法的前面，类的实现可以放在使用该类的语法的前面或后面</p>
<p>2.5 属性名以下划线开头，类名首字母大写（规范）</p>
<p>2.6 属性不允许声明时初始化</p>
<p>2.7 OC方法必须通过创建对象，由对象来进行调用；函数是可以直接调用的</p>
<p>2.8 方法只有声明没有实现，运行是会报错的</p>
<p>3、将类写在一个模块中，便于代码的维护、团队开发</p>
<p>一个模块，至少包含两个文件：</p>
<p>.h 头文件 写类的声明</p>
<p>.m 实现文件 写类的实现</p>
<p>在模块文件夹下新建文件</p>
<p><img src="/imgs/23.png"></p>
<p>创建一个新的Cocoa Class文件</p>
<p><img src="/imgs/24.png"></p>
<p>系统会默认建立.h和.m模板文件</p>
<p><img src="/imgs/25.png"></p>
<p>.h 头文件默认代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.h</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;10.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>.m 类的实现文件默认代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.m</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;10.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>修改.h头文件中的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.h</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;10.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    @public</span><br><span class="line">    NSString *_name;</span><br><span class="line">    int _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)run;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>再修改.m类实现文件中的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.m</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;10.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">- (void)run&#123;</span><br><span class="line">    NSLog(@&quot;我跑的很快、、、&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>在程序的入口函数main.m文件中进行调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassModuleDevelop 类的模块开发演示</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;10.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;&#x2F;&#x2F;导入头文件，使用文件中的类</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        Person *person &#x3D; [Person new];</span><br><span class="line">        [person run];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建议在.h头文件中只写一个类的声明，.m文件只写一个类的实现</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>编程</tag>
        <tag>代码分组导航</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中的方法说明</title>
    <url>/2020/11/24/apple-oc-method/</url>
    <content><![CDATA[<p>1、Objective-C中两种类型的方法</p>
<p>实例方法或对象方法：在类中以“-”号声明的方法，在此之前的文章中所声明的方法都是实例方法，实例方法的声明请参考之前的文章Objective-C中类的声明与实现</p>
<p>类方法：在类中以“+”号声明，其余与实例方法都一样</p>
<p>2、类方法的声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.h</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">+ (void)talk;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>3、类方法的实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Person.m</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">+(void)talk&#123;</span><br><span class="line">    NSLog(@&quot;我是一个类方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>注意：类方法的声明和实现与实例方法的声明和实现唯一的区别就在于“+”号和“-”号，其它地方均一样</p>
<p>4、类方法的调用</p>
<p>类方法的调用不同于实例方法，直接通过类名调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  ClassMethod 类方法的声明与调用</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;11.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    [Person talk];&#x2F;&#x2F;直接使用类名调用类方法</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-11 11:43:03.617613+0800 ClassMethod[1389:47747] 我是一个类方法</span><br><span class="line">Program ended with exit code: 0</span><br></pre></td></tr></table></figure>
<p>5、类方法的调用过程</p>
<p>我之前的文章Objective-C中类是如何存储在内存中的对实例方法在内存中的存储进行了说明，类方法在内存中的存储方式和实例方法一样，都是在内存的代码段中。在调用类方法时，直接在代码段中调用，省去了类的实例对象的创建，从而节省了内存空间，提高了类方法的调用效率。</p>
<p>此外，在类方法中不能直接访问类的属性和实例方法。因为在类方法被调用时，有可能类的实例没有被创建。可以在类方法中直接创建类的实例，通过创建的实例来访问实例的属性和实例方法。在实例方法中可以直接调用类方法。</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>类方法</tag>
      </tags>
  </entry>
  <entry>
    <title>import指令与include指令的区别</title>
    <url>/2020/11/24/apple-oc-import/</url>
    <content><![CDATA[<p>#import指令和#include指令都是在引用系统的资源，  也可以理解为引用一个API或者代码包，但对引用的资源的操作不同。</p>
<p>对于资源A，如果连续多次使用 #import A 将A资源导入到我们的代码中，资源只会被导入一次，简单的描述为：底层对#import所导入的资源有一个重复验证，如果某一资源已经由#import导入，则不再对导入的资源进行再次导入。</p>
<p>而#include指令对同一资源的导入，会根据#include指令的使用次数，导入对应次数的同一资源。也就是说，如果有N条 #include A 指令，A资源就会被导入N次。</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中NSString的使用</title>
    <url>/2020/11/24/apple-oc-nsstring/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  NSStringDemo</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;9&#x2F;29.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;&#x2F;&#x2F;Objective-C的一个基本框架，包含了很多的基本功能，Foundation.h头文件包含了Foundation框架中所有的头文件</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;*</span><br><span class="line">         NSString</span><br><span class="line">         1、用于声明字符串类型的指针变量，存储Objective-C字符串的地址</span><br><span class="line">         2、Objective-C字符串常量带有前缀@符号</span><br><span class="line">         *&#x2F;</span><br><span class="line">        NSString *str &#x3D; @&quot;这里是一个Objective-C字符串常量&quot;;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;输出Objective-C字符串：%@&quot;, str);&#x2F;&#x2F;使用占位符%@输出一个Objective-C字符串</span><br><span class="line">        &#x2F;&#x2F;NSLog(str);&#x2F;&#x2F;也可以这么写，但是有编译警告，建议使用占位符输出</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>objective-c</tag>
        <tag>NSString</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中NULL与nil的区别</title>
    <url>/2020/11/24/apple-oc-null-nil/</url>
    <content><![CDATA[<h1 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h1><p>指针变量的值，表示该指针不指向内存中的任何1个地址空间，与0等价。</p>
<h1 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h1><p>指针变量的值，表示该指针不指向内存中的任何1个地址空间，与0等价。</p>
<h1 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h1><p>C语言指针类型，用NULL</p>
<p>OC类指针类型，用nil</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  NullAndNilDemo</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        int *a &#x3D; NULL;&#x2F;&#x2F;表示a不指向内存中的任何一片空间</span><br><span class="line">        Person *person &#x3D; nil;&#x2F;&#x2F;表示person不指向内存中的任何一个对象</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过被赋值为nil的类指针去调用对象中的属性时，运行时出错，调用方法不会出错，但是方法不会执行，没有任何效果，这是Objective-C语言的机制，不要问我为什么、、、</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>nil</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中注释和函数的定义</title>
    <url>/2020/11/24/apple-oc-zs/</url>
    <content><![CDATA[<p>小编之前是从事Android开发的，不浪费口舌了，直接上代码，看看注释就明了了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  MyObjective-C</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;9&#x2F;29.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里表示的是单行注释</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 这里表示的多行注释</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">void customMethod();&#x2F;&#x2F;函数的定义</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool    &#x2F;&#x2F;自动释放池，可以将代码写到自动释放池中，也可以将自动释放池删除，不会对应用程序造成影响</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);&#x2F;&#x2F;自动换行，如果在结尾加上\n换行符，自动换行失效，\n生效</span><br><span class="line">        </span><br><span class="line">        customMethod();&#x2F;&#x2F;调用自定义的函数，main函数作为程序的入口和出口，因此自定义的函数必须在main函数之前进行声明</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自定义函数的实现，也可以在函数定义时进行功能的实现</span><br><span class="line">void customMethod()&#123;</span><br><span class="line">    NSLog(@&quot;简单的声明一个函数&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>objective-c</tag>
        <tag>函数</tag>
        <tag>注释</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中的访问权限</title>
    <url>/2020/11/24/apple-oc-permission/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  main.m</span><br><span class="line">&#x2F;&#x2F;  PermissionDemo 权限访问修饰符</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by ZhaiKun on 2017&#x2F;10&#x2F;9.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Permission : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;默认的访问权限，当前类和子类可访问</span><br><span class="line">    @protected</span><br><span class="line">    int protectedPermission;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;所有类都可以访问</span><br><span class="line">    @public</span><br><span class="line">    int publicPermission;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;只有当前类可以访问</span><br><span class="line">    @private</span><br><span class="line">    int privatePermission;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;框架级的访问权限，在当前framework的类中视为@protected，在当前框架以外视为@private</span><br><span class="line">    @package</span><br><span class="line">    int packagePermisson;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>objective-c</tag>
        <tag>访问权限</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS配置Android SDK 环境变量</title>
    <url>/2020/11/24/apple-sdk/</url>
    <content><![CDATA[<p>1、启动终端，可以在Spotlight中搜索“终端”</p>
<p>2、进入当前用户的HOME目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br></pre></td></tr></table></figure>

<p>3、创建“.bash_profile”文件（当该文件不存在时），如果文件已存在，直接打开文件即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure>

<p>4、打开.bash_profile文件，对其内容进行编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure>

<p>5、此时文本编辑器会打开一个文本，增加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ANDROID_HOME&#x3D;&#x2F;Users&#x2F;zhaikun&#x2F;Downloads&#x2F;ZhaiKun&#x2F;Android&#x2F;android-sdk-macosx</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;platform-tools</span><br></pre></td></tr></table></figure>

<p>ANDROID_HOME配置为Android SDK的安装路径</p>
<p>6、保存文件，关闭.bash_profile</p>
<p>7、更新刚配置的环境变量，在终端执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>

<p>8、验证配置是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<p>配置结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">93bab263	device</span><br></pre></td></tr></table></figure>

<p>或者直接在终端输入adb，不提示“-bash: a: command not found”即表示配置成功</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Android SDK</tag>
        <tag>ANDROID_HOME</tag>
        <tag>配置环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C中@符号说明</title>
    <url>/2020/11/24/apple-oc/</url>
    <content><![CDATA[<p>常见的两个功能：</p>
<p>1、将C字符串转换为OC字符串</p>
<p>2、OC中的大多数关键字都是以@符号开头</p>
]]></content>
      <categories>
        <category>Apple开发基础</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>objective-c</tag>
        <tag>符号</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2020/11/25/arithmetic-bubble-sort/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>将相邻的两个元素逐一进行比较，将大的一个元素后移，每比较完一次都会将最大的一个元素移动到最后，然后再用相同的方法依次比较剩余的元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.zhaikun.arithmeticdemo;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by zhaikun68 on 2018&#x2F;2&#x2F;22.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 冒泡排序Demo</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class BubbleSortDemo &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG &#x3D; &quot;BubbleSortDemo&quot;;&#x2F;&#x2F;日志打印标记</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] initArray &#x3D; &#123;9, 10, 1, 2, 0, 8, 0, 5, 8, 3&#125;;</span><br><span class="line">        int[] sortAfterArray &#x3D; bubbleSort(initArray);</span><br><span class="line">        System.out.print(&quot;排序后的数组 &#x3D; &quot; + Arrays.toString(sortAfterArray));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 冒泡排序算法实现，以简单数组为例</span><br><span class="line">     *</span><br><span class="line">     * @param sortArray 待排序的数组</span><br><span class="line">     * @return 排序后的数组</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static int[] bubbleSort(int[] sortArray) &#123;</span><br><span class="line">        if (sortArray &#x3D;&#x3D; null || sortArray.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            System.out.print(&quot;待排序数组为空，不进行排序&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int outIndex &#x3D; sortArray.length - 1; outIndex &gt; 1; outIndex--) &#123;</span><br><span class="line">            for (int inIndex &#x3D; 0; inIndex &lt; outIndex; inIndex++) &#123;</span><br><span class="line">                if (sortArray[inIndex] &gt; sortArray[inIndex + 1]) &#123;</span><br><span class="line">                    int temp &#x3D; sortArray[inIndex];</span><br><span class="line">                    sortArray[inIndex] &#x3D; sortArray[inIndex + 1];</span><br><span class="line">                    sortArray[inIndex + 1] &#x3D; temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sortArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>冒泡排序</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2020/11/25/arithmetic-insertion-sorting/</url>
    <content><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>有待排序数组A，任意指定A中某一位置作为元素的插入位置B。此时，假设B位置左端的所有元素都是有序的，记录下B位置的元素ValueB，将ValueB与其左端的有序元素进行比较，如果ValueB左端的元素大于或等于ValueB，则将其后移一位，最后在后移空出的位置将ValueB插入。重复以上步骤，直到数组中的最后一个元素，排序结束。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.zhaikun.arithmeticdemo;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by zhaikun68 on 2018&#x2F;2&#x2F;24.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 插入排序Demo</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class InsertSortDemo &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 插入排序</span><br><span class="line">     *</span><br><span class="line">     * @param sortArray 待排序数组</span><br><span class="line">     * @return 已排序数组</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static int[] insertSort(int[] sortArray) &#123;</span><br><span class="line">        if (sortArray &#x3D;&#x3D; null || sortArray.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            System.out.print(&quot;待排序数组为空，不进行排序&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int temp;&#x2F;&#x2F;记录插入数组中的元素</span><br><span class="line">        int inIndex;&#x2F;&#x2F;内层循环索引</span><br><span class="line">        for (int outIndex &#x3D; 1; outIndex &lt; sortArray.length; outIndex++) &#123;</span><br><span class="line">            temp &#x3D; sortArray[outIndex];</span><br><span class="line">            inIndex &#x3D; outIndex;</span><br><span class="line">            while (inIndex &gt; 0 &amp;&amp; sortArray[inIndex - 1] &gt;&#x3D; temp) &#123;</span><br><span class="line">                sortArray[inIndex] &#x3D; sortArray[inIndex - 1];</span><br><span class="line">                --inIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            sortArray[inIndex] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        return sortArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] initArray &#x3D; &#123;2, 3, 2, 2, 6, 9, 0, 7, 4, 5&#125;;&#x2F;&#x2F;初始化一个待排序的数组</span><br><span class="line">        int[] sortAfterArray &#x3D; insertSort(initArray);</span><br><span class="line">        System.out.print(&quot;排序后的数组 &#x3D; &quot; + Arrays.toString(sortAfterArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 设置国内镜像网站</title>
    <url>/2020/11/23/as-http-proxy/</url>
    <content><![CDATA[<p><strong>转载文章 原文链接：<a href="https://www.jianshu.com/p/0936af70cda3">https://www.jianshu.com/p/0936af70cda3</a></strong></p>
<p>我们平时在使用android studio时，难免需要从android官网下载一些项目运行所需要的SDK文件，但是因为android官网在国外，访问起来会比较慢，所以配置国内android官网镜像网站可以提高下载速度，这里比较常用的android镜像网站是电子科技大学的镜像网站：mirrors.dormforce.net 端口：80</p>
<p>通过File=》Setting=》Appearance &amp; Behavior =》System Settings =》Http Proxy，选择Auto-detect proxy settings，并且填写URL为：mirrors.dormforce.net :80，点击clear passwords，最后点击OK保存设置即可</p>
<p><img src="/imgs/4.webp"></p>
]]></content>
      <categories>
        <category>Android开发基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
        <tag>国内镜像网站访问地址</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2020/11/25/arithmetic-selection-sort/</url>
    <content><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>在待排序的数组中，任意指定一个数作为数组中最小的数并记录其在数组中的位置，记为a，将该数与待排序数组中的数据依次进行比较，当该数字比数组中的数字大时，将此时数组中小的数据的位置交给a，此时a位置所对应在数组中的值作为指定的最小数再次与数组中剩余的数依次进行比较；当指定的最小数与数组中的数据全部比较完之后，得到一个数组中最小的数，然后将这个最小的数排到数组的最左端，在待排序数组中排除最左端已经完成排序的数，将剩下的数作为一个数组，按一样的方式再次进行比较。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.zhaikun.arithmeticdemo;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by zhaikun68 on 2018&#x2F;2&#x2F;23.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 选择排序Demo</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SelectionSortDemo &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 选择排序</span><br><span class="line">     *</span><br><span class="line">     * @param sortArray 待排序数组</span><br><span class="line">     * @return 排序完成后的数组</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static int[] selectionSort(int[] sortArray) &#123;</span><br><span class="line">        if (sortArray &#x3D;&#x3D; null || sortArray.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            System.out.print(&quot;待排序数组为空，不进行排序&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int minIndex;&#x2F;&#x2F;指定一个比较值在待比较数组中的下标</span><br><span class="line">        for (int outIndex &#x3D; 0; outIndex &lt; sortArray.length - 1; outIndex++) &#123;</span><br><span class="line">            minIndex &#x3D; outIndex;</span><br><span class="line">            for (int inIndex &#x3D; outIndex + 1; inIndex &lt; sortArray.length; inIndex++) &#123;</span><br><span class="line">                if (sortArray[minIndex] &gt; sortArray[inIndex]) &#123;</span><br><span class="line">                    minIndex &#x3D; inIndex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            int temp &#x3D; sortArray[outIndex];</span><br><span class="line">            sortArray[outIndex] &#x3D; sortArray[minIndex];</span><br><span class="line">            sortArray[minIndex] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        return sortArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] initArray &#x3D; &#123;1, 1, 5, 0, 2, 2, 10, 5, 3, 6&#125;;&#x2F;&#x2F;初始化一个需要排序的数组</span><br><span class="line">        int[] sortAfterArray &#x3D; selectionSort(initArray);</span><br><span class="line">        System.out.print(Arrays.toString(sortAfterArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>排序</tag>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>我的 CSDN 博客 https://blog.csdn.net/zhaikun68</title>
    <url>/2020/11/19/blog-csdn/</url>
    <content><![CDATA[<p>文章同步更新至 CSDN 博客 <a href="https://blog.csdn.net/zhaikun68">我的 CSDN 博客</a></p>
]]></content>
      <categories>
        <category>CSDN博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>CSDN</tag>
      </tags>
  </entry>
  <entry>
    <title>站点访问人数 Buszanui 插件数据统计错误</title>
    <url>/2020/11/18/buszanui-visitor-count/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用 Hexo 搭建博客时，在博客中集成了站点访问数据量统计插件 <a href="http://busuanzi.ibruce.info/">busuanzi</a>。在本地启动服务后，统计数据错误。</p>
<blockquote>
<p>本地服务中，busuanzi 统计的数据信息未从0开始且起始数据显示过于庞大</p>
</blockquote>
<h2 id="busuanzi-站点起始统计数据"><a href="#busuanzi-站点起始统计数据" class="headerlink" title="busuanzi 站点起始统计数据"></a>busuanzi 站点起始统计数据</h2><p><img src="/imgs/busuanzi-visitor-count-website.png"></p>
<h2 id="busuanzi-页面起始统计数据"><a href="#busuanzi-页面起始统计数据" class="headerlink" title="busuanzi 页面起始统计数据"></a>busuanzi 页面起始统计数据</h2><p><img src="/imgs/busuanzi-visitor-count-post.png"></p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>静态网站是无后台服务支撑的，大多数情况下都需要借助第三方的插件实现相关功能。</p>
<p>上述的问题是在本地项目执行命令：Hexo s，后产生的，具体的原因博主也没有弄清楚。猜测是在本地部署时，busuanzi 自身的初始化数据，或是博客主题（butterfly）中的初始化数据…</p>
<blockquote>
<p>将项目部署到静态网站后，busuanzi 数据统计正常</p>
</blockquote>
<p>总结：busuanzi 数据统计不能依赖于本地服务</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>博客部署到相关的静态网站即可</p>
<h2 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h2><ul>
<li>GitHub Page</li>
<li>Gitee Page</li>
<li>Coding</li>
</ul>
]]></content>
      <categories>
        <category>Hexo配置问题汇总</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Buszanui</tag>
        <tag>站点数据统计</tag>
      </tags>
  </entry>
  <entry>
    <title>ADB 命令使用 - 优质项目推荐</title>
    <url>/2020/11/24/cmd-adb-project/</url>
    <content><![CDATA[<blockquote>
<p>ADB，Android Debug Bridge，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。</p>
</blockquote>
<p>当同事跟楼主说，你可以用adb命令完成xxx功能的时候，楼主一脸懵逼的看着大佬，心里真是无限感慨Biubiubiu。。。</p>
<p>确实，掌握好adb相关的命令，可以提高开发者的开发效率，还有就是。。。逼格 → 逼格高呀！</p>
<p>推荐一个优秀的 GitHub 项目：</p>
<p><a href="https://github.com/mzlogin/awesome-adb">https://github.com/mzlogin/awesome-adb</a></p>
]]></content>
      <categories>
        <category>CMD终端命令</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
        <tag>CMD终端命令</tag>
      </tags>
  </entry>
  <entry>
    <title>使用adb命令导出设备中安装的APP中的数据库（DB）文件</title>
    <url>/2020/11/24/cmd-adb-db/</url>
    <content><![CDATA[<h2 id="1-在导出数据库文件之前，需要确保设备处于连接状态"><a href="#1-在导出数据库文件之前，需要确保设备处于连接状态" class="headerlink" title="1 在导出数据库文件之前，需要确保设备处于连接状态"></a>1 在导出数据库文件之前，需要确保设备处于连接状态</h2><p>打开命令行窗口，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p>显示结果：<br><img src="https://img-blog.csdnimg.cn/20190403132134420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图中箭头所指处为已连接设备的唯一序列号，唯一标识已连接的设备。如果同时连接多台设备，可以看到所有设备的信息，以列表形式展示；如果没有连接设备，也会有相应的提示信息。</p>
<h2 id="2-导出设备中的数据库文件"><a href="#2-导出设备中的数据库文件" class="headerlink" title="2 导出设备中的数据库文件"></a>2 导出设备中的数据库文件</h2><h3 id="2-1-选择数据库文件的导出目录"><a href="#2-1-选择数据库文件的导出目录" class="headerlink" title="2.1 选择数据库文件的导出目录"></a>2.1 选择数据库文件的导出目录</h3><p>在命令行窗口中直接切换到数据库文件保存目录，如F盘根目录：<br><img src="https://img-blog.csdnimg.cn/20190403133953302.png" alt="在这里插入图片描述"></p>
<h3 id="2-2-使用adb命令"><a href="#2-2-使用adb命令" class="headerlink" title="2.2 使用adb命令"></a>2.2 使用adb命令</h3><h4 id="2-2-1-adb-shell"><a href="#2-2-1-adb-shell" class="headerlink" title="2.2.1 adb shell"></a>2.2.1 adb shell</h4><p>命令：adb shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-选择应用包名"><a href="#2-2-2-选择应用包名" class="headerlink" title="2.2.2 选择应用包名"></a>2.2.2 选择应用包名</h4><p>命令：run-as 你自己的应用包名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-进入数据库文件在设备中的保存路径"><a href="#2-2-3-进入数据库文件在设备中的保存路径" class="headerlink" title="2.2.3 进入数据库文件在设备中的保存路径"></a>2.2.3 进入数据库文件在设备中的保存路径</h3><p>命令：cd databases</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $</span><br></pre></td></tr></table></figure>
<h3 id="2-2-4-查看当前应用的所有数据库文件"><a href="#2-2-4-查看当前应用的所有数据库文件" class="headerlink" title="2.2.4 查看当前应用的所有数据库文件"></a>2.2.4 查看当前应用的所有数据库文件</h3><p>命令：ls</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ ls</span><br><span class="line">accs.db         facedoor.db         message_accs_db         ut.db</span><br><span class="line">accs.db-journal facedoor.db-journal message_accs_db-journal ut.db-journal</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $</span><br></pre></td></tr></table></figure>
<p>数据库中的DB文件显示后，选择自己需要的进行导出即可。</p>
<h3 id="2-2-5-选择导出文件"><a href="#2-2-5-选择导出文件" class="headerlink" title="2.2.5 选择导出文件"></a>2.2.5 选择导出文件</h3><p>将数据库目录下的文件导出到设备的 sdcard。</p>
<p>命令：cat 数据库名.db&gt;/sdcard/数据库名.db</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ ls</span><br><span class="line">accs.db         facedoor.db         message_accs_db         ut.db</span><br><span class="line">accs.db-journal facedoor.db-journal message_accs_db-journal ut.db-journal</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $</span><br></pre></td></tr></table></figure>
<p>在执行一遍 命令：cat 数据库名.db&gt;/sdcard/数据库名.db</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ ls</span><br><span class="line">accs.db         facedoor.db         message_accs_db         ut.db</span><br><span class="line">accs.db-journal facedoor.db-journal message_accs_db-journal ut.db-journal</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $</span><br></pre></td></tr></table></figure>
<h3 id="2-2-6-退出-adb-shell-命令下的当前应用"><a href="#2-2-6-退出-adb-shell-命令下的当前应用" class="headerlink" title="2.2.6 退出 adb shell 命令下的当前应用"></a>2.2.6 退出 adb shell 命令下的当前应用</h3><p>命令：exit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ ls</span><br><span class="line">accs.db         facedoor.db         message_accs_db         ut.db</span><br><span class="line">accs.db-journal facedoor.db-journal message_accs_db-journal ut.db-journal</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ exit</span><br><span class="line">A1:&#x2F; $</span><br></pre></td></tr></table></figure>
<h3 id="2-2-7-退出到系统盘F"><a href="#2-2-7-退出到系统盘F" class="headerlink" title="2.2.7 退出到系统盘F"></a>2.2.7 退出到系统盘F</h3><p>命令：exit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ ls</span><br><span class="line">accs.db         facedoor.db         message_accs_db         ut.db</span><br><span class="line">accs.db-journal facedoor.db-journal message_accs_db-journal ut.db-journal</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ exit</span><br><span class="line">A1:&#x2F; $ exit</span><br><span class="line">f:\&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-8-导出数据库文件"><a href="#2-2-8-导出数据库文件" class="headerlink" title="2.2.8 导出数据库文件"></a>2.2.8 导出数据库文件</h3><p>命令：adb pull /sdcard/accs.db</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:\&gt;adb shell</span><br><span class="line">A1:&#x2F; $ run-as blog.csdn.net.karenchia</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia $ cd databases</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ ls</span><br><span class="line">accs.db         facedoor.db         message_accs_db         ut.db</span><br><span class="line">accs.db-journal facedoor.db-journal message_accs_db-journal ut.db-journal</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ cat accs.db&gt;&#x2F;sdcard&#x2F;accs.db</span><br><span class="line">A1:&#x2F;data&#x2F;data&#x2F;blog.csdn.net.karenchia&#x2F;databases $ exit</span><br><span class="line">A1:&#x2F; $ exit</span><br><span class="line"></span><br><span class="line">f:\&gt;adb pull &#x2F;sdcard&#x2F;accs.db</span><br><span class="line">&#x2F;sdcard&#x2F;accs.db: 1 file pulled. 3.9 MB&#x2F;s (20480 bytes in 0.005s)</span><br><span class="line"></span><br><span class="line">f:\&gt;</span><br></pre></td></tr></table></figure>
<p>在F盘下即可看到导出的数据库文件：<br><img src="https://img-blog.csdnimg.cn/20190403150107307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">使用相关的DB文件打开软件便可浏览文件中的相关信息。</p>
<h2 id="3-查看数据库DB文件"><a href="#3-查看数据库DB文件" class="headerlink" title="3 查看数据库DB文件"></a>3 查看数据库DB文件</h2><p><a href="https://www.navicat.com.cn/">数据库DB文件打开工具Navicat</a></p>
]]></content>
      <categories>
        <category>CMD终端命令</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>数据库</tag>
        <tag>ADB</tag>
        <tag>数据库文件</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>使用adb命令对连接设备进行截图，并保存到电脑</title>
    <url>/2020/11/24/cmd-adb-screenshot/</url>
    <content><![CDATA[<h2 id="1-确定设备或模拟器已连接"><a href="#1-确定设备或模拟器已连接" class="headerlink" title="1 确定设备或模拟器已连接"></a>1 确定设备或模拟器已连接</h2><h2 id="2-将截屏图片保存到设备或模拟器的sdcard"><a href="#2-将截屏图片保存到设备或模拟器的sdcard" class="headerlink" title="2 将截屏图片保存到设备或模拟器的sdcard"></a>2 将截屏图片保存到设备或模拟器的sdcard</h2><p>命令：adb shell /system/bin/screencap -p /sdcard/保存的图片名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 6.1.7601]</span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\jiemi&gt;adb shell &#x2F;system&#x2F;bin&#x2F;screencap -p &#x2F;sdcard&#x2F;screenshot.png</span><br></pre></td></tr></table></figure>
<h2 id="3-将图片从设备或模拟器的sdcard中保存到电脑"><a href="#3-将图片从设备或模拟器的sdcard中保存到电脑" class="headerlink" title="3 将图片从设备或模拟器的sdcard中保存到电脑"></a>3 将图片从设备或模拟器的sdcard中保存到电脑</h2><p>命令：adb pull /sdcard/sdcard中保存的图片名称 电脑保存路径/电脑中保存图片的名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 6.1.7601]</span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\jiemi&gt;adb shell &#x2F;system&#x2F;bin&#x2F;screencap -p &#x2F;sdcard&#x2F;screenshot.png</span><br><span class="line"></span><br><span class="line">C:\Users\jiemi&gt;adb pull &#x2F;sdcard&#x2F;screenshot.png f:&#x2F;img&#x2F;screenshot.png</span><br><span class="line">&#x2F;sdcard&#x2F;screenshot.png: 1 file pulled. 7.5 MB&#x2F;s (70375 bytes in 0.009s)</span><br><span class="line"></span><br><span class="line">C:\Users\jiemi&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CMD终端命令</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
        <tag>屏幕截图</tag>
        <tag>保存到电脑</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Coding 搭建博客之自定义域名的坑</title>
    <url>/2020/11/18/coding-dns/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 搭建的博客一般都是托管到第三方网站，如GitHub、Gitee、Coding。</p>
<p>通常情况下，大多数教程或者是 Hexo 官网都介绍的是部署到 GitHub，但众所周知，GitHub的访问速度实在跟不上节奏，故而出现了双访问通道的部署方式：</p>
<ul>
<li>国内线路部署到 Coding</li>
<li>国外线路部署到 GitHub</li>
</ul>
<p>本文主要讨论部署到 Coding 时，应注意的细节。</p>
<h1 id="Hexo-部署到-Coding-的大致流程"><a href="#Hexo-部署到-Coding-的大致流程" class="headerlink" title="Hexo 部署到 Coding 的大致流程"></a>Hexo 部署到 Coding 的大致流程</h1><p>1 申请 <a href="https://e.coding.net/login">Coding</a> 账号</p>
<p>2 在 Coding 创建项目</p>
<p>3 本地 Hexo 项目提交至 Coding</p>
<p>4 Coding 部署静态网站</p>
<p>具体流程官网文档已经很详细了<a href="https://help.coding.net/docs/pages/practice/hexo.html">快速搭建 Hexo 个人博客</a></p>
<h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p>官方文档<a href="https://help.coding.net/docs/pages/operating/customize.html">自定义域名配置</a></p>
<p>为什么要自定义域名：</p>
<ul>
<li>Coding 部署出来的静态网站访问地址不太友好，比如我的博客地址：<a href="https://coding-pages-bucket-3488949-8014283-4889-371964-1304213829.cos-website.ap-hongkong.myqcloud.com/">https://coding-pages-bucket-3488949-8014283-4889-371964-1304213829.cos-website.ap-hongkong.myqcloud.com/</a></li>
<li>在自定义的域名中可设置站点访问路线，优化访问速度</li>
<li>可视化的域名，比如我的自定义的域名<a href="https://karenchia.net/">https://karenchia.net/</a></li>
</ul>
<h1 id="自定义域名采坑记录"><a href="#自定义域名采坑记录" class="headerlink" title="自定义域名采坑记录"></a>自定义域名采坑记录</h1><p>按照官网所给的文档完成自定义域名后，使用自定义的域名即可访问站点。</p>
<blockquote>
<p>如果自定义的域名需要修改，必须在域名修改成功后，再次将本地的 Hexo 项目重新部署到 Coding。</p>
</blockquote>
<p>本地站点，一定要先执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>然后重新编译文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>再将站点部署到 Coding</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p><strong>如果这样还是无法访问，重复以上步骤，多试几次…</strong></p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://blog.csdn.net/victoryxa/article/details/104286462">Hexo博客部署到码云和Coding</a></p>
]]></content>
      <categories>
        <category>Hexo配置问题汇总</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Coding</tag>
        <tag>自定义域名</tag>
        <tag>域名解析</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment中嵌套Fragment，不显示</title>
    <url>/2020/11/23/fragment-child-fragment/</url>
    <content><![CDATA[<p><strong>转载文章 原文链接：<a href="https://www.jianshu.com/p/e146698482f5">https://www.jianshu.com/p/e146698482f5</a></strong></p>
<p>先看一段错误代码，这段代码写在一个 Fragment 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void initView()&#123;</span><br><span class="line">    mViewPageAdpater &#x3D; new ViewPageAdpater( getFragmentManager() );</span><br><span class="line">    </span><br><span class="line">    mFragments.add( new BoonListFragment() );</span><br><span class="line">    mTitles.add( &quot;title1&quot; );</span><br><span class="line">    mFragments.add( new BoonListFragment() );</span><br><span class="line">    mTitles.add( &quot;title2&quot; );</span><br><span class="line">    mFragments.add( new BoonListFragment() );</span><br><span class="line">    mTitles.add( &quot;title3&quot; );</span><br><span class="line">    </span><br><span class="line">    mViewPageAdpater.setFragments( mFragments, mTitles );       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码看上去一切正常，但是有时候就是好好的就是现实不出来，找来找去死活找不到原因。<br>一切东西都是普通的再不普通不过的 List 或者 Adapter，List这么简单的东西还能出问题？<br>那就是Adapter的问题了，Adapter里面实现的不对吗？也没有问题啊，就那么简单的几个方法。</p>
<p>最后终于发现，问题就在 new ViewPageAdpater( getFragmentManager() ); 这里。</p>
<p>之前就知道 fragment中嵌套fragment 应该使用 getChildFragmentManager() ，每次用起来都是忘了。<br>自己把自己丢坑里去了。<br>发现了之后，清楚的想起了，自己之前被坑过一次，这次又…………</p>
<p>正确的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void initView()&#123;</span><br><span class="line">    mViewPageAdpater &#x3D; new ViewPageAdpater( getChildFragmentManager() );</span><br><span class="line">    </span><br><span class="line">    mFragments.add( new BoonListFragment() );</span><br><span class="line">    mTitles.add( &quot;title1&quot; );</span><br><span class="line">    mFragments.add( new BoonListFragment() );</span><br><span class="line">    mTitles.add( &quot;title2&quot; );</span><br><span class="line">    mFragments.add( new BoonListFragment() );</span><br><span class="line">    mTitles.add( &quot;title3&quot; );</span><br><span class="line">    </span><br><span class="line">    mViewPageAdpater.setFragments( mFragments, mTitles );       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以后每当在 Fragment 中要用到 FragmentManager 的时候一定要记住，使用 getChildFragmentManager()。</p>
]]></content>
      <categories>
        <category>Android开发问题汇总</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>fragment</tag>
        <tag>child fragment</tag>
        <tag>嵌套</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo独立博客配置</category>
      </categories>
      <tags>
        <tag>HexoDemo</tag>
      </tags>
  </entry>
  <entry>
    <title>git 本地仓库和远程创库的同步</title>
    <url>/2020/11/25/git-warehouse-synchronization/</url>
    <content><![CDATA[<p>今天在本地创建了一个仓库，为便于代码的管理，准备将本地的仓库同步到git，实现代码的同步更新</p>
<p>1、在git上先创建一个仓库，选用模板创建或创建一个空仓库均可</p>
<p>2、没有创建本地仓库的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir IonicCss &#x2F;&#x2F;选择仓库的创建路径，然后使用该命令创建一个名为IonicCss的文件夹</span><br><span class="line">$ cd IonicCss &#x2F;&#x2F;进入创建文件夹的根目录</span><br><span class="line">$ git init &#x2F;&#x2F;将当前目录初始化为本地git仓库</span><br><span class="line">$ touch README.md &#x2F;&#x2F;新增一个名为README.md的文件</span><br><span class="line">$ git add README.md &#x2F;&#x2F;将文件README.md添加到暂存区</span><br><span class="line">$ git commit -m &quot;first commit&quot; &#x2F;&#x2F;提交README.md文件</span><br><span class="line">$ git remote add origin https:&#x2F;&#x2F;git.oschina.net&#x2F;zk15519092013&#x2F;IonicCss.git &#x2F;&#x2F;将本地仓库同步至地址为https:&#x2F;&#x2F;git.oschina.net&#x2F;zk15519092013&#x2F;IonicCss.git（改地址未git仓库的HTTPS地址，也可直接更换为SSH地址）的git仓库</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>3、已经创建好了本地仓库，在本地仓库的根目录，直接使用一下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;git.oschina.net&#x2F;zk15519092013&#x2F;IonicCss.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>此时，已完成本地仓库和远程git仓库的代码同步</p>
]]></content>
      <categories>
        <category>Code代码托管</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>库</tag>
        <tag>管理</tag>
        <tag>本地仓库与git远程仓库同步</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Butterfly + GitHub/Coding 搭建个人独立博客</title>
    <url>/2020/11/18/hexo-set-up/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自从在CSDN写博客以来，开始慢慢觉得应该拥有一个属于自己的博客网站，期间折腾了很多次，结果都不了了知，最近终于将这颗浮躁的心安抚了下来，咱还是做一个有始有终的程序员。</p>
<p>起初写博客只是为了记录自己在平时开发过程中的经历，那些踩过的坑，还有那些优秀的框架。后面逐渐感受到学会一个新的知识点不容易，将这个知识点说得清楚，道得明白，更是不易，写博客也是对自己的一个提高。</p>
<p>在此之前虽然写过一些博客，但内容着实不丰富，也体会到了创作的不易，期待后续能够推出一些高质量的博文。</p>
<p>下面我们开始进入今天的正题。。。</p>
<h1 id="搭建平台"><a href="#搭建平台" class="headerlink" title="搭建平台"></a>搭建平台</h1><p>基于 GitHub + Hexo + NexT 搭建个人博客</p>
<ul>
<li>GitHub 个人博客静态网页托管平台</li>
<li>Hexo 快速、简洁且高效的博客框架，搭建本地静态网页站点</li>
<li>NexT 个人博客主题，样式多样化、功能多样化</li>
</ul>
<h1 id="在使用-Hexo-之前，需要先注册-GitHub-账号"><a href="#在使用-Hexo-之前，需要先注册-GitHub-账号" class="headerlink" title="在使用 Hexo 之前，需要先注册 GitHub 账号"></a>在使用 Hexo 之前，需要先注册 GitHub 账号</h1><p><a href="https://github.com/">注册 GitHub 账号</a></p>
<h1 id="安装配置-Hexo"><a href="#安装配置-Hexo" class="headerlink" title="安装配置 Hexo"></a>安装配置 Hexo</h1><p>Hexo 官方提供了多种主题配置，这里我选择了、、、</p>
<p><a href="https://hexo.io/zh-cn/">Hexo 官方教程</a></p>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p><a href="http://theme-next.iissnan.com/theme-settings.html">NexT 主题配置官网</a></p>
<h5 id="这里为什么不详细介绍安装过程？"><a href="#这里为什么不详细介绍安装过程？" class="headerlink" title="这里为什么不详细介绍安装过程？"></a>这里为什么不详细介绍安装过程？</h5><p>官网文档已经将各类配置信息描述得非常清楚，文章中另说明在配置过程中需要注意的问题。</p>
<h1 id="搭建过程中需要注意的问题"><a href="#搭建过程中需要注意的问题" class="headerlink" title="搭建过程中需要注意的问题"></a>搭建过程中需要注意的问题</h1><ul>
<li>在 GitHub 上创建项目时，项目名必须是【你的 GitHub 用户名.github.io】，如：我的 GitHub 用户名为 KarenChia，那么项目的名称为【KarenChia.github.io】</li>
<li>在 Hexo 的站点配置文件 【_config.yml】中的配置信息，均是以 key: value 形式进行配置，尤其要注意的是在 “:” 与 value 之前存在一个【空格】，如无【空格】，配置的相关属性无效。</li>
<li>在将本地静态页面部署到 GitHub 时，仓库地址最好直接选择使用【HTTPS】，如果使用的是【SSH】，需要再对【SSH】进行配置，否则本地站点中的静态网页无法部署到 GitHub 上进行托管。</li>
<li>在部署之前，需要先安装 【 hexo-deployer-git】插件，必须确保插件安装成功。</li>
</ul>
<h1 id="博客主题-Butterfly"><a href="#博客主题-Butterfly" class="headerlink" title="博客主题 Butterfly"></a>博客主题 Butterfly</h1><p>后续已将主题修改为 <a href="https://butterfly.js.org/">Butterfly</a></p>
]]></content>
      <categories>
        <category>Hexo独立博客配置</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Coding</tag>
        <tag>Butterfly</tag>
        <tag>GitHub</tag>
        <tag>个人独立博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Writing Exercise</title>
    <url>/2020/11/16/hexo-writing-exercise/</url>
    <content><![CDATA[<p>Hexo 主题配置的相关命令</p>
<h1 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sticky: 1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo独立博客配置</category>
      </categories>
      <tags>
        <tag>HexoDemo</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm安装、配置、激活码</title>
    <url>/2020/11/25/html-webstorm-install/</url>
    <content><![CDATA[<h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><p>下载最新版的<a href="https://www.jetbrains.com/webstorm/">WebStorm官网地址</a></p>
<p>安装过程直接下一步即可</p>
<p>首次运行WebStorm会显示如下提示框：导入WebStorm的首选项设置和许可证信息</p>
<p><img src="/imgs/80.png"></p>
<p>之前安装过WebStorm的，可以选择第一个选项导入之前所做的设置即可</p>
<p>小编是首次安装WebStorm，选择图中选项，点击OK即可</p>
<p>官方的WebStorm只有30天的免费使用时间，需要对WebStorm进行注册<a href="https://blog.csdn.net/xx1710/article/details/51725012">激活码参考地址</a></p>
<p><img src="/imgs/81.png"></p>
<p>JetBrains Account：如果你购买的有JetBrains Account，选择此项填入已购买的账号信息账号购买地址</p>
<p>Activation code：激活码，直接将激活码粘贴到文本区域</p>
<p>License server：许可证服务器，指定许可证的服务器地址，上文中提到的激活码参考地址中，有可用的许可证服务器地址</p>
<p>选择License server选项，填入可用的许可证服务器地址，点击activate</p>
<p><img src="/imgs/82.png"></p>
<p>接下来选择创建一个新的项目，开启WebStorm开发之旅！</p>
<h1 id="webstorm-配置"><a href="#webstorm-配置" class="headerlink" title="webstorm 配置"></a>webstorm 配置</h1><p>下面是对编辑器的一些基本设置</p>
<p>1、显示代码行号</p>
<p><img src="/imgs/83.png"></p>
<p><img src="/imgs/84.png"></p>
<p>2、编辑字体大小</p>
<p><img src="/imgs/85.png"></p>
<p>3、IDE主题设置，当然是上档次的黑又硬了</p>
<p><img src="/imgs/86.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WebStorm</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>激活码注册</tag>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm代码输入提示忽略首字母大小写</title>
    <url>/2020/11/25/html-webtorm-ignore-dxx/</url>
    <content><![CDATA[<p>在写代码时，我是无法容忍为了一个大写开头的代码而特意的切换我的输入法的，那就来解决一下下。</p>
<p>在代码自动完成菜单中，设置Case sensitive completion（字母的敏感度）的值为none，that`s ok!</p>
<p><img src="/imgs/77.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WebStorm</tag>
        <tag>智能提示</tag>
        <tag>忽略大小写</tag>
        <tag>代码敏感度设置</tag>
      </tags>
  </entry>
  <entry>
    <title>安装指定版本的Ionic或Cordova</title>
    <url>/2020/11/24/ionic-assign-version/</url>
    <content><![CDATA[<p>安装ionic 及 cordova</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cordova ionic</span><br></pre></td></tr></table></figure>

<p>更新命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update -g cordova ionic</span><br></pre></td></tr></table></figure>

<p>安装特定版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g ionic cordova@5.0.0</span><br><span class="line">npm install -g ionic@1.6.5</span><br></pre></td></tr></table></figure>

<p>删除命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall cordova -g</span><br><span class="line">npm uninstall ionic -g</span><br></pre></td></tr></table></figure>

<p>在macOS中，需要在npm前添加sudo，增加权限访问</p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>Ionic</tag>
        <tag>Cordova</tag>
        <tag>指定版本</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 项目实战------创建项目</title>
    <url>/2020/11/24/ionic-create-project/</url>
    <content><![CDATA[<p>关于开发环境的搭建，请参考小编的另一篇文章<a href="https://blog.csdn.net/zhaikun68/article/details/77838152">Ionic 介绍、安装、配置、项目不同平台编译、DeBug调试经验总结</a></p>
<p>此处，小编的开发环境已搭建完成，使用的Ionic版本为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\zhaikun\IonicProjects&gt;ionic -v</span><br><span class="line">3.9.2</span><br></pre></td></tr></table></figure>

<p>这是在任意目录下，输入命令查看的结果V3.9.2</p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>当然了，相信牛X的你每天都有堆积如山的工作，那么多的命令记不住也是常有的事。小编常用的解决方案就是help、help、help</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\zhaikun\IonicProjects&gt;ionic --help</span><br><span class="line">   _             _</span><br><span class="line">  (_)           (_)</span><br><span class="line">   _  ___  _ __  _  ___</span><br><span class="line">  | |&#x2F; _ \| &#39;_ \| |&#x2F; __|</span><br><span class="line">  | | (_) | | | | | (__</span><br><span class="line">  |_|\___&#x2F;|_| |_|_|\___|  CLI 3.9.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Usage:</span><br><span class="line"></span><br><span class="line">    $ ionic &lt;command&gt; [&lt;args&gt;] [--help] [--verbose] [--quiet] [--no-interactive] [--confirm] [options]</span><br><span class="line"></span><br><span class="line">  Global Commands:</span><br><span class="line"></span><br><span class="line">    config &lt;subcommand&gt; ...... Manage CLI and project config values (subcommands: get, set)</span><br><span class="line">    docs ..................... Open the Ionic documentation website</span><br><span class="line">    info ..................... Print system&#x2F;environment info</span><br><span class="line">    login .................... Login with your Ionic ID</span><br><span class="line">    signup ................... Create an Ionic account</span><br><span class="line">    start .................... Create a new project</span><br><span class="line">    telemetry ................ Opt in and out of telemetry</span><br></pre></td></tr></table></figure>

<p>看一下给出的命令及对应的解释，就可以很清楚的知道，我们创建一个项目需要使用start命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\zhaikun\IonicProjects&gt;ionic start</span><br></pre></td></tr></table></figure>

<p>然后系统会提示我们，给我们创建的项目取一个响亮的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? What would you like to name your project:</span><br></pre></td></tr></table></figure>

<p>此处小编的项目名称为MyIonicDemo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? What would you like to name your project: MyIonicDemo</span><br></pre></td></tr></table></figure>

<p>回车，提示让我们选择一个创建模板，此处小编选择的是tabs模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? What starter would you like to use: tabs</span><br></pre></td></tr></table></figure>

<p>回车，等待项目创建完毕即可，这里查看下项目创建过程和成功后的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">√ Creating directory .\MyIonicDemo - done!</span><br><span class="line">[INFO] Fetching app base (https:&#x2F;&#x2F;github.com&#x2F;ionic-team&#x2F;ionic2-app-base&#x2F;archive&#x2F;master.tar.gz)</span><br><span class="line">√ Downloading - done!</span><br><span class="line">[INFO] Fetching starter template tabs (https:&#x2F;&#x2F;github.com&#x2F;ionic-team&#x2F;ionic2-starter-tabs&#x2F;archive&#x2F;master.tar.gz)</span><br><span class="line">√ Downloading - done!</span><br><span class="line">√ Updating package.json with app details - done!</span><br><span class="line">√ Creating configuration file ionic.config.json - done!</span><br><span class="line">[INFO] Installing dependencies may take several minutes!</span><br><span class="line">&gt; npm install</span><br><span class="line">√ Running command - done!</span><br><span class="line">&gt; git init</span><br><span class="line">&gt; git add -A</span><br><span class="line">&gt; git commit -m &quot;Initial commit&quot; --no-gpg-sign</span><br><span class="line"></span><br><span class="line">♬ ♫ ♬ ♫  Your Ionic app is ready to go! ♬ ♫ ♬ ♫</span><br><span class="line"></span><br><span class="line">Run your app in the browser (great for initial development):</span><br><span class="line">  ionic serve</span><br><span class="line"></span><br><span class="line">Run on a device or simulator:</span><br><span class="line">  ionic cordova run ios</span><br><span class="line"></span><br><span class="line">Test and share your app on a device with the Ionic View app:</span><br><span class="line">  http:&#x2F;&#x2F;view.ionic.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Next Steps:</span><br><span class="line">Go to your newly created project: cd .\MyIonicDemo</span><br></pre></td></tr></table></figure>

<p>此处项目的创建过程说的比较繁琐，目的是为了强调，如果命令行记不住咱们应该如何应对，下文中将使用相关命令直接进行，创建项目的完整命令为 $ ionic start MyIonicDemo tabs</p>
<h1 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h1><p>进入我们创建的项目的根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd MyIonicDemo</span><br></pre></td></tr></table></figure>

<p>为项目添加Android平台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova platform add android</span><br></pre></td></tr></table></figure>

<p>添加iOS平台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova platform add ios</span><br></pre></td></tr></table></figure>

<p>在添加平台支持时，会下载一些所必须的插件，建议全称翻墙</p>
<p>添加成功后会在项目的platforms文件夹中显示添加的平台支持</p>
<p><img src="/imgs/63.png"></p>
<h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic serve</span><br></pre></td></tr></table></figure>

<p>使用上面的命令会使项目运行在浏览器中</p>
<p><img src="/imgs/64.png"></p>
<p>作为一个APP开发人员，让我看到如此的界面是无发忍受的，我们需要看到的是在手机上的显示效果，在浏览器地址后面加上 ionic-lab</p>
<p><img src="/imgs/65.png"></p>
<p>图片太小看不清楚，怎么办？鼠标指针悬停在图片上，右键点击，选择在新浏览器中打开，come on</p>
<p>在模拟器中查看运行效果（以Android为例，需要配置好JDK、Android SDK）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova emulate android</span><br></pre></td></tr></table></figure>

<h1 id="项目编译（以Android为例）"><a href="#项目编译（以Android为例）" class="headerlink" title="项目编译（以Android为例）"></a>项目编译（以Android为例）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova build android</span><br></pre></td></tr></table></figure>

<p>编译成功后，会在对应目录下生成相应的apk文件</p>
<p><img src="/imgs/66.png"></p>
<h1 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h1><p>不管是Android平台，还是iOS平台，都可以将platforms文件夹下的android文件夹或iOS文件夹直接在IDE中打开即可</p>
<p><img src="/imgs/67.png"></p>
<p>打开的项目是可以直接在IDE中运行调试的，但是切记，不要再IDE中修改android或iOS文件夹下的任何文件，因为改动是无效的，对于Ionic模式下建立的项目，其源码都是存放于项目根目录下的src文件夹中的。</p>
<p>关于Ionic项目的工程目录结构，请查看<a href="https://blog.csdn.net/zhaikun68/article/details/77849751">Ionic 3 项目的工程目录结构</a></p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>hybrid app</tag>
        <tag>Ionic3</tag>
        <tag>环境搭建</tag>
        <tag>项目创建-编译-调试</tag>
        <tag>目录结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 项目实战------自定义插件</title>
    <url>/2020/11/24/ionic-custom-plugin/</url>
    <content><![CDATA[<p>之前对 Ionic 3 项目插件的结构做过简单的介绍<a href="https://blog.csdn.net/zhaikun68/article/details/77851760">Ionic 3 插件应用：plugin基本知识了解</a></p>
<p>一个插件应该至少包含以下file：</p>
<p>plugin-name</p>
<p>—————–src    //插件支持平台</p>
<p>——android.java      //添加了支持Android平台</p>
<p>—————–www    //JS文件，将Cordova.exec方法暴露给HTML/JS调用</p>
<p>                       ——android.js</p>
<p>—————–plugin.xml     //插件的配置文件，通知CLI哪个平台应该从什么地方Copy哪些文件到什么地方，以及CLI在生成config.xml时应该根据平台加入什么样的特殊设置</p>
<p>在自定插件时，我们可以按照上述的目录结构，建立各自的文件，但是这样做的话，比较繁琐，因此一般不推荐这样做。</p>
<p>推荐使用插件生成工具plugman，他会自动帮我们创建好想要的插件目录，然后去对应文件中实现我们需要的功能即可。</p>
<h1 id="安装plugman"><a href="#安装plugman" class="headerlink" title="安装plugman"></a>安装plugman</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g plugman</span><br></pre></td></tr></table></figure>

<h1 id="创建插件模板"><a href="#创建插件模板" class="headerlink" title="创建插件模板"></a>创建插件模板</h1><p>先看一下plugman可用的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugman manages plugin.xml-compatible cordova plugins into cordova-generated projects.</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">To display this help file, use one of the following:</span><br><span class="line"></span><br><span class="line">$ plugman --help</span><br><span class="line">$ plugman -h</span><br><span class="line"></span><br><span class="line">To display the plugman version, use one of the following:</span><br><span class="line"></span><br><span class="line"> $ plugman --version</span><br><span class="line"> $ plugman -v</span><br><span class="line"></span><br><span class="line">Optional flags</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line"> --debug|-d    : Verbose mode</span><br><span class="line"></span><br><span class="line">Install a plugin</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">    $ plugman install --platform &lt;platform&gt; --project &lt;directory&gt; --plugin &lt;plugin&gt; [--variable NAME&#x3D;VALUE]</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line"></span><br><span class="line"> - platform &lt;platform&gt;: One of android, ios, blackberry10, wp8, or windows8</span><br><span class="line"> - project &lt;directory&gt;: Path reference to a cordova-generated project of the platform you specify</span><br><span class="line"> - plugin &lt;plugin&gt;: One of a path reference to a local copy of a plugin, or a remote https: or git: URL pointing to a cordova plugin (optionally append #branch:subdir) or</span><br><span class="line"> a plugin ID from http:&#x2F;&#x2F;plugins.cordova.io</span><br><span class="line"> - variable NAME&#x3D;VALUE: Some plugins require install-time variables to be defined. These could be things like API keys&#x2F;tokens or other app-specific variables.</span><br><span class="line"></span><br><span class="line"> Optional parameters:</span><br><span class="line"></span><br><span class="line"> - www &lt;directory&gt;: www assets for the plugin will be installed into this directory. Default is to install into the standard www directory for the platform specified</span><br><span class="line"> - plugins_dir &lt;directory&gt;: a copy of the plugin will be stored in this directory. Default is to install into the &lt;project directory&gt;&#x2F;plugins folder</span><br><span class="line"> - searchpath &lt;directory&gt;: when looking up plugins by ID, look in this directory and each of its subdirectories for the plugin before hitting the registry.</span><br><span class="line">   Multiple search paths can be used by either specifying the flag multiple times, or by separating paths with a delimiter (: on &#39;nix, ; on Windows).</span><br><span class="line"></span><br><span class="line">Uninstall a plugin</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line">    $ plugman uninstall --platform &lt;platform&gt; --project &lt;directory&gt; --plugin &lt;plugin-id&gt;</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line"></span><br><span class="line"> - platform &lt;platform&gt;: One of android, ios, blackberry10, wp8, or windows8</span><br><span class="line"> - project &lt;directory&gt;: Path reference to a cordova-generated project of the platform you specify</span><br><span class="line"> - plugin &lt;plugin-id&gt;: The plugin to remove, identified by its id (see the plugin.xml&#39;s &lt;plugin id&gt; attribute)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interacting with the registry</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">NOTICE: The Cordova Plugin registry became read-only, so the following commands have been deprecated and removed:</span><br><span class="line"></span><br><span class="line">    $ plugman adduser</span><br><span class="line">    $ plugman publish</span><br><span class="line">    $ plugman unpublish</span><br><span class="line">    $ plugman owner add&#x2F;rm</span><br><span class="line"></span><br><span class="line">For managing plugins for the npm registry, use corresponding npm commands. For more info on npm commands see &#96;npm help &lt;command&gt;&#96;.</span><br><span class="line">Learn more about publishing your plugins to npm at http:&#x2F;&#x2F;plugins.cordova.io&#x2F;npm&#x2F;developers.html</span><br><span class="line"></span><br><span class="line">Search for a plugin</span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line">    $ plugman search &lt;keyword1 keyword2 ...&gt;</span><br><span class="line"></span><br><span class="line">Display plugin information</span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line">    $ plugman info &lt;pluginID&gt;</span><br><span class="line"></span><br><span class="line">Manage registry configuration</span><br><span class="line">-----------------------------</span><br><span class="line">Display current configuration settings:</span><br><span class="line"></span><br><span class="line">    $ plugman config ls</span><br><span class="line"></span><br><span class="line">Display the current registry URL:</span><br><span class="line"></span><br><span class="line">    $ plugman config get registry</span><br><span class="line"></span><br><span class="line">Set registry URL:</span><br><span class="line"></span><br><span class="line">    $ plugman config set registry &lt;url&gt;</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">    $ plugman config set registry http:&#x2F;&#x2F;localhost:5984&#x2F;registry&#x2F;_design&#x2F;app&#x2F;_rewrite</span><br><span class="line"></span><br><span class="line">Manage Owners</span><br><span class="line">-------------</span><br><span class="line">Plugin owners are allowed to publish updates to a plugin. To display a list of owners for a plugin, use:</span><br><span class="line"></span><br><span class="line">    $ plugman owner ls &lt;pluginID&gt;</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">    $ plugman owner ls org.apache.cordova.core.file</span><br><span class="line"></span><br><span class="line">Create A Plugin</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">    $ plugman create --name &lt;pluginName&gt; --plugin_id &lt;pluginID&gt; --plugin_version &lt;version&gt; [--path &lt;directory&gt;] [--variable NAME&#x3D;VALUE]</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line"></span><br><span class="line"> - &lt;pluginName&gt;: The name of the plugin</span><br><span class="line"> - &lt;pluginID&gt;: An ID for the plugin, ex: org.bar.foo</span><br><span class="line"> - &lt;version&gt;: A version for the plugin, ex: 0.0.1</span><br><span class="line"> - &lt;directory&gt;: An absolute or relative path for the directory where the plugin project will be created</span><br><span class="line"> - variable NAME&#x3D;VALUE: Extra variables such as description or Author</span><br><span class="line"></span><br><span class="line">Add a Package.JSON file to plugin</span><br><span class="line">---------------------------------</span><br><span class="line">Creates a package.json file in the plugin based on values from plugin.xml.</span><br><span class="line"></span><br><span class="line"> $ plugman createpackagejson &lt;directory&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Add a Platform to a Plugin</span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line">    $ plugman platform add --platform_name &lt;platform&gt;</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line"></span><br><span class="line">- &lt;platform&gt;: One of android, ios</span><br><span class="line"></span><br><span class="line">Remove a Platform from a Plugin</span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line">    $ plugman platform remove --platform_name &lt;platform&gt;</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line"></span><br><span class="line">- &lt;platform&gt;: One of android, ios</span><br></pre></td></tr></table></figure>

<p>然后使用创建插件的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Create A Plugin</span><br><span class="line">---------------</span><br><span class="line"></span><br><span class="line">    $ plugman create --name &lt;pluginName&gt; --plugin_id &lt;pluginID&gt; --plugin_version &lt;version&gt; [--path &lt;directory&gt;] [--variable NAME&#x3D;VALUE]</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line"></span><br><span class="line"> - &lt;pluginName&gt;: The name of the plugin</span><br><span class="line"> - &lt;pluginID&gt;: An ID for the plugin, ex: org.bar.foo</span><br><span class="line"> - &lt;version&gt;: A version for the plugin, ex: 0.0.1</span><br><span class="line"> - &lt;directory&gt;: An absolute or relative path for the directory where the plugin project will be created</span><br><span class="line"> - variable NAME&#x3D;VALUE: Extra variables such as description or Author</span><br></pre></td></tr></table></figure>

<p>对应的参数都有说明，此处不再进行翻译，开始创建一个插件模板（插件可以选择创建在任意目录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ plugman create --name ZKCustomPlugin --plugin_id zhaikun68.plugin.custom --plugin_version 0.0.1 --path E:\zhaikun\MyPlugins --variable zhaikun68</span><br></pre></td></tr></table></figure>

<p>打开创建的插件模块</p>
<p><img src="/imgs/49.png"></p>
<h1 id="添加插件支持的平台"><a href="#添加插件支持的平台" class="headerlink" title="添加插件支持的平台"></a>添加插件支持的平台</h1><p>进入插件的根目录</p>
<p>支持Android</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ plugman platform add --platform_name android</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/50.png"></p>
<p>支持iOS平台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ plugman platform add --platform_name ios</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/51.png"></p>
<p>plugin.xml文件内容说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;utf-8&#39;?&gt;</span><br><span class="line">&lt;!--插件的标识，即发布安装到 plugin 的 ID ，在创建插件是设定--&gt;</span><br><span class="line">&lt;plugin id&#x3D;&quot;zhaikun68.plugin.custom&quot; version&#x3D;&quot;0.0.1&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;apache.org&#x2F;cordova&#x2F;ns&#x2F;plugins&#x2F;1.0&quot;</span><br><span class="line">        xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;!--插件的名称--&gt;</span><br><span class="line">    &lt;name&gt;ZKCustomPlugin&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;ZHAIKUN68&#x2F;&gt;</span><br><span class="line">    &lt;!--对应我们的 javascript 文件，src 属性指向 www&#x2F;ZKCustomPlugin.js--&gt;</span><br><span class="line">    &lt;js-module name&#x3D;&quot;ZKCustomPlugin&quot; src&#x3D;&quot;www&#x2F;ZKCustomPlugin.js&quot;&gt;</span><br><span class="line">        &lt;!--指定clobbers ，然后通过target的值来调用 ZKCustomPlugin.js,此处对应 ZKCustomPlugin.js 中exports的对象--&gt;</span><br><span class="line">        &lt;clobbers target&#x3D;&quot;cordova.plugins.ZKCustomPlugin&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;js-module&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--支持的平台Android--&gt;</span><br><span class="line">    &lt;platform name&#x3D;&quot;android&quot;&gt;</span><br><span class="line">        &lt;config-file parent&#x3D;&quot;&#x2F;*&quot;</span><br><span class="line">                     target&#x3D;&quot;res&#x2F;xml&#x2F;config.xml&quot;&gt;&lt;!--这里是表示在res&#x2F;xml&#x2F;config.xml文件中插入以下一行代码--&gt;</span><br><span class="line">            &lt;feature name&#x3D;&quot;ZKCustomPlugin&quot;&gt;</span><br><span class="line">                &lt;param name&#x3D;&quot;android-package&quot;</span><br><span class="line">                       value&#x3D;&quot;zhaikun68.plugin.custom.ZKCustomPlugin&quot;&#x2F;&gt;&lt;!--调用插件的类名，实现了execute方法--&gt;</span><br><span class="line">            &lt;&#x2F;feature&gt;</span><br><span class="line">        &lt;&#x2F;config-file&gt;</span><br><span class="line">        &lt;config-file parent&#x3D;&quot;&#x2F;*&quot; target&#x3D;&quot;AndroidManifest.xml&quot;&#x2F;&gt;&lt;!--对AndroidManifest.xml文件进行修改--&gt;</span><br><span class="line">        &lt;!--表示将插件src&#x2F;android目录下的ZKCustomPlugin.java文件拷贝到android的src&#x2F;zhaikun68&#x2F;plugin&#x2F;custom目录下面去--&gt;</span><br><span class="line">        &lt;!--如果有引用包，也可以这样拷贝到安卓的指定lib下面去--&gt;</span><br><span class="line">        &lt;source-file src&#x3D;&quot;src&#x2F;android&#x2F;ZKCustomPlugin.java&quot; target-dir&#x3D;&quot;src&#x2F;zhaikun68&#x2F;plugin&#x2F;custom&#x2F;ZKCustomPlugin&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;platform&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--支持的平台iOS--&gt;</span><br><span class="line">    &lt;platform name&#x3D;&quot;ios&quot;&gt;</span><br><span class="line">        &lt;config-file parent&#x3D;&quot;&#x2F;*&quot; target&#x3D;&quot;config.xml&quot;&gt;</span><br><span class="line">            &lt;feature name&#x3D;&quot;ZKCustomPlugin&quot;&gt;</span><br><span class="line">                &lt;param name&#x3D;&quot;ios-package&quot; value&#x3D;&quot;ZKCustomPlugin&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;feature&gt;</span><br><span class="line">        &lt;&#x2F;config-file&gt;</span><br><span class="line">        &lt;source-file src&#x3D;&quot;src&#x2F;ios&#x2F;ZKCustomPlugin.m&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;platform&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>

<p>ZKCustomPlugin.js文件内容说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var exec &#x3D; require(&#39;cordova&#x2F;exec&#39;);</span><br><span class="line"></span><br><span class="line">exports.coolMethod &#x3D; function (arg0, success, error) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Cordova.exec（）方法说明</span><br><span class="line">     * function(winParam) &#123;&#125;：成功回调函数。假设您的 exec成功完成，此功能将随您传递给它的任何参数一起执行</span><br><span class="line">     * function(error) &#123;&#125;：错误回调函数。如果操作未成功完成，则此功能将执行可选的错误参数</span><br><span class="line">     * &quot;service&quot;：在本机端呼叫的服务名称,与原生端的类名保持一致</span><br><span class="line">     * &quot;action&quot;：在本机端调用的动作名称，对应原生类execute（）的入参，原生代码通过对action进行判断，从而知道JS让原生端执行什么样的功能</span><br><span class="line">     * [ arguments ]：传到原生环境的参数数组</span><br><span class="line">     *&#x2F;</span><br><span class="line">    exec(success, error, &quot;ZKCustomPlugin&quot;, &quot;coolMethod&quot;, [arg0]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>ZKCustomPlugin.java文件内容说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package zhaikun68.plugin.custom;</span><br><span class="line"></span><br><span class="line">import org.apache.cordova.CordovaPlugin;</span><br><span class="line">import org.apache.cordova.CallbackContext;</span><br><span class="line"></span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONException;</span><br><span class="line">import org.json.JSONObject;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * This class echoes a string called from JavaScript.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ZKCustomPlugin extends CordovaPlugin &#123;&#x2F;&#x2F;必须继承CordovaPlugin</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">    * action对应exec传过来的action</span><br><span class="line">    * args对应exec传过来的参数数组</span><br><span class="line">    * callbackContext：对应exec传过来的回调函数</span><br><span class="line">    *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException &#123;</span><br><span class="line">        if (action.equals(&quot;coolMethod&quot;)) &#123;</span><br><span class="line">            String message &#x3D; args.getString(0);</span><br><span class="line">            this.coolMethod(message, callbackContext);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void coolMethod(String message, CallbackContext callbackContext) &#123;</span><br><span class="line">        if (message !&#x3D; null &amp;&amp; message.length() &gt; 0) &#123;</span><br><span class="line">            callbackContext.success(message);&#x2F;&#x2F;成功的回调函数</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            callbackContext.error(&quot;Expected one non-empty string argument.&quot;);&#x2F;&#x2F;失败的回调函数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="将自定义的插件添加到我们创建的项目"><a href="#将自定义的插件添加到我们创建的项目" class="headerlink" title="将自定义的插件添加到我们创建的项目"></a>将自定义的插件添加到我们创建的项目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova plugin add E:\zhaikun\MyPlugins\ZKCustomPlugin</span><br></pre></td></tr></table></figure>

<p>未添加成功，有错误信息提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ &gt; cordova plugin add E:\zhaikun\MyPlugins\ZKCustomPlugin --save</span><br><span class="line">× Running command - failed!</span><br><span class="line">[ERROR] An error occurred while running cordova plugin add E:\zhaikun\MyPlugins\ZKCustomPlugin --save (exit code 1):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Error: Invalid Plugin! E:\zhaikun\MyPlugins\ZKCustomPlugin needs a valid package.json</span><br></pre></td></tr></table></figure>

<p>错误信息翻译过来大概就是：插件的根目录下需要一个package.json文件</p>
<p>记性好的大牛应该发现了在 plugman 工具中，正好有创建package.json文件的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Add a Package.JSON file to plugin</span><br><span class="line">---------------------------------</span><br><span class="line">Creates a package.json file in the plugin based on values from plugin.xml.</span><br><span class="line"></span><br><span class="line"> $ plugman createpackagejson &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p>创建package.json文件（进入插件的根目录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ plugman createpackagejson E:\zhaikun\MyPlugins\ZKCustomPlugin</span><br></pre></td></tr></table></figure>

<p>回车后会提示输入插件名、版本号、插件描述、git仓库地址、作者和证书信息，如果不进行修改，一直回车即可</p>
<p><img src="/imgs/52.png"></p>
<p>回到我们项目的根目录，重新添加插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova plugin add E:\zhaikun\MyPlugins\ZKCustomPlugin</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/53.png"></p>
<h1 id="插件调用"><a href="#插件调用" class="headerlink" title="插件调用"></a>插件调用</h1><p>在home.html文件中增加两个按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ion-header&gt;</span><br><span class="line">  &lt;ion-navbar&gt;</span><br><span class="line">    &lt;ion-title&gt;Home&lt;&#x2F;ion-title&gt;</span><br><span class="line">  &lt;&#x2F;ion-navbar&gt;</span><br><span class="line">&lt;&#x2F;ion-header&gt;</span><br><span class="line"></span><br><span class="line">&lt;ion-content padding&gt;</span><br><span class="line">  &lt;h2&gt;Welcome to Ionic!&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    This starter project comes with simple tabs-based layout for apps</span><br><span class="line">    that are going to primarily use a Tabbed UI.</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Take a look at the &lt;code&gt;src&#x2F;pages&#x2F;&lt;&#x2F;code&gt; directory to add or change tabs,</span><br><span class="line">    update any existing page or create new pages.</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--这里是添加的两个按钮--&gt;</span><br><span class="line">  &lt;button ion-button (click)&#x3D;&quot;getNativeSuccess()&quot;&gt;模拟-成功调用原生插件&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button ion-button (click)&#x3D;&quot;getNativeFailed()&quot;&gt;模拟-失败调用原生插件&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ion-content&gt;</span><br></pre></td></tr></table></figure>

<p>然后修改home.ts文件中的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;Component&#125; from &#39;@angular&#x2F;core&#39;;</span><br><span class="line">import &#123;NavController&#125; from &#39;ionic-angular&#39;;</span><br><span class="line"></span><br><span class="line">declare let cordova: any;&#x2F;&#x2F;这里是修改的代码</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#39;page-home&#39;,</span><br><span class="line">  templateUrl: &#39;home.html&#39;</span><br><span class="line">&#125;)</span><br><span class="line">export class HomePage &#123;</span><br><span class="line"></span><br><span class="line">  constructor(public navCtrl: NavController) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;这里是修改的代码</span><br><span class="line">  getNativeSuccess() &#123;</span><br><span class="line">    cordova.plugins.ZKCustomPlugin.coolMethod(</span><br><span class="line">      &#39;原生插件调用成功&#39;,</span><br><span class="line">      successMsg &#x3D;&gt; &#123;</span><br><span class="line">        alert(successMsg)</span><br><span class="line">      &#125;, failedMsg &#x3D;&gt; &#123;</span><br><span class="line">        alert(failedMsg)</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;这里是修改的代码</span><br><span class="line">  getNativeFailed() &#123;</span><br><span class="line">    cordova.plugins.ZKCustomPlugin.coolMethod(</span><br><span class="line">      &#39;&#39;,</span><br><span class="line">      successMsg &#x3D;&gt; &#123;</span><br><span class="line">        alert(successMsg)</span><br><span class="line">      &#125;, failedMsg &#x3D;&gt; &#123;</span><br><span class="line">        alert(failedMsg)</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后编译项目即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova build android</span><br></pre></td></tr></table></figure>

<p>效果图</p>
<p><img src="/imgs/54.png"></p>
<p><img src="/imgs/55.png"></p>
<p><img src="/imgs/56.png"></p>
<p>此处的调试是在真机上进行的，在浏览器调试会出现运行时异常</p>
<p>此外，插件一旦添加到项目中，以后如需对插件进行升级，需先卸载掉原先的插件，在重新安装</p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>hybrid app</tag>
        <tag>Ionic3</tag>
        <tag>自定义插件</tag>
        <tag>数据交互</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic创建项目失败Error:read ETIMEDOUT解决方案</title>
    <url>/2020/11/24/ionic-error-etimedout/</url>
    <content><![CDATA[<p>在使用Ionic创建项目时，出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appledeMac-mini:~ zhaikun$ ionic start IonicAppDemo tabs</span><br><span class="line">✖ Downloading and extracting tabs starter - failed!</span><br><span class="line">Error: read ETIMEDOUT</span><br><span class="line">    at TLSWrap.onread (net.js:659:25)</span><br></pre></td></tr></table></figure>

<p>原因：在下载项目对应的模板时无法下载。</p>
<p>在网上研究了很多方法，有大神提出改动npm源后再进行操作，但是这是下载模板的问题，在下载模板时还没有使用到npm，注意：npm install是在Ionic的项目模板下载完之后才执行的。</p>
<p>方案一：尝试翻墙后重新创建项目</p>
<p>方案二：在IonicTeam的GitHub上找对应使用的模板<a href="https://github.com/ionic-team?page=3">https://github.com/ionic-team?page=3</a></p>
<p>方案三：Ionic版本回退到V3.9.2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g ionic@3.9.2</span><br></pre></td></tr></table></figure>

<p>在macOS中注意在npm前加入sudo，增加权限访问</p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>Ionic Error</tag>
        <tag>read ETIMEDOUT</tag>
        <tag>创建项目</tag>
      </tags>
  </entry>
  <entry>
    <title>取消npm代理或淘宝镜像</title>
    <url>/2020/11/24/ionic-npm/</url>
    <content><![CDATA[<p>1、取消npm代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br></pre></td></tr></table></figure>

<p>2、取消淘宝镜像</p>
<p>打开npm代理编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure>

<p>找到对应的淘宝代理执行删除命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config delete [需要删除的代理名称]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>代理</tag>
        <tag>淘宝镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 插件应用：plugin基本知识了解</title>
    <url>/2020/11/24/ionic-plugin-knowledge/</url>
    <content><![CDATA[<p>既然Ionic CLI（命令行工具）依赖于Cordova，就可调用原生的API，那么在我们的Ionic项目中如何实现，今天我们了解下ionic中plugin的使用。</p>
<p>Ionic与Cordova/phoneGP都是基于HTML5的移动开发框架，Ionic在Cordova的基础上进行了优化，但其插件依然遵循Cordova插件的相关规范，同时提供类似于Cordova的plugin管理方法。</p>
<h1 id="此处使用Ionic为最新的V3-9-2版本为例"><a href="#此处使用Ionic为最新的V3-9-2版本为例" class="headerlink" title="此处使用Ionic为最新的V3.9.2版本为例"></a>此处使用Ionic为最新的V3.9.2版本为例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic -v</span><br></pre></td></tr></table></figure>

<p>直接检测系统安装的Ionic版本</p>
<h1 id="项目中插件目录（新建的Ionic项目，如果不添加platform，在项目中是没有plugins插件目录的）"><a href="#项目中插件目录（新建的Ionic项目，如果不添加platform，在项目中是没有plugins插件目录的）" class="headerlink" title="项目中插件目录（新建的Ionic项目，如果不添加platform，在项目中是没有plugins插件目录的）"></a>项目中插件目录（新建的Ionic项目，如果不添加platform，在项目中是没有plugins插件目录的）</h1><p>如何添加platform？以Android为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova platform add android</span><br></pre></td></tr></table></figure>

<p>tip：不同版本的Ionic，其CLI有可能不同，使用帮助命令查看即可</p>
<p><img src="/imgs/69.png"></p>
<h1 id="查看已经安装的插件"><a href="#查看已经安装的插件" class="headerlink" title="查看已经安装的插件"></a>查看已经安装的插件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\zhaikun\IonicProjects\Demo&gt;ionic cordova plugin -list</span><br><span class="line">&gt; cordova plugin ls</span><br><span class="line">√ Running command - done!</span><br><span class="line">cordova-plugin-console 1.0.5 &quot;Console&quot;</span><br><span class="line">cordova-plugin-device 1.1.4 &quot;Device&quot;</span><br><span class="line">cordova-plugin-splashscreen 4.0.3 &quot;Splashscreen&quot;</span><br><span class="line">cordova-plugin-statusbar 2.2.2 &quot;StatusBar&quot;</span><br><span class="line">cordova-plugin-whitelist 1.3.1 &quot;Whitelist&quot;</span><br><span class="line">ionic-plugin-keyboard 2.2.1 &quot;Keyboard&quot;</span><br></pre></td></tr></table></figure>

<p>这是小编创建的项目中已经安装的plugin，由于添加的platform平台和自定义添加的plugin的不同，此处显示的plugin插件数目视具体的项目而定。</p>
<h1 id="plugin帮助命令"><a href="#plugin帮助命令" class="headerlink" title="plugin帮助命令"></a>plugin帮助命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova plugin --help</span><br></pre></td></tr></table></figure>

<p>将显示有关plugin的操作命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova plugin add [插件名] &#x2F;&#x2F;添加插件</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova plugin rm [插件名] &#x2F;&#x2F;删除插件</span><br></pre></td></tr></table></figure>

<h1 id="plugins目录下android-json和ios-json文件说明"><a href="#plugins目录下android-json和ios-json文件说明" class="headerlink" title="plugins目录下android.json和ios.json文件说明"></a>plugins目录下android.json和ios.json文件说明</h1><p><img src="/imgs/70.png"></p>
<p>以android.json为例：文件中保存了对应Android平台所安装插件的条目，在使用plugin管理命令对plugin进行添加或删除时，文件中记录的插件条目也会随之变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;prepare_queue&quot;: &#123;</span><br><span class="line">        &quot;installed&quot;: [],</span><br><span class="line">        &quot;uninstalled&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;config_munge&quot;: &#123;</span><br><span class="line">        &quot;files&quot;: &#123;</span><br><span class="line">            &quot;res&#x2F;xml&#x2F;config.xml&quot;: &#123;</span><br><span class="line">                &quot;parents&quot;: &#123;</span><br><span class="line">                    &quot;&#x2F;*&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;xml&quot;: &quot;&lt;feature name&#x3D;\&quot;Whitelist\&quot;&gt;&lt;param name&#x3D;\&quot;android-package\&quot; value&#x3D;\&quot;org.apache.cordova.whitelist.WhitelistPlugin\&quot; &#x2F;&gt;&lt;param name&#x3D;\&quot;onload\&quot; value&#x3D;\&quot;true\&quot; &#x2F;&gt;&lt;&#x2F;feature&gt;&quot;,</span><br><span class="line">                            &quot;count&quot;: 1</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;xml&quot;: &quot;&lt;feature name&#x3D;\&quot;StatusBar\&quot;&gt;&lt;param name&#x3D;\&quot;android-package\&quot; value&#x3D;\&quot;org.apache.cordova.statusbar.StatusBar\&quot; &#x2F;&gt;&lt;param name&#x3D;\&quot;onload\&quot; value&#x3D;\&quot;true\&quot; &#x2F;&gt;&lt;&#x2F;feature&gt;&quot;,</span><br><span class="line">                            &quot;count&quot;: 1</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;xml&quot;: &quot;&lt;feature name&#x3D;\&quot;Device\&quot;&gt;&lt;param name&#x3D;\&quot;android-package\&quot; value&#x3D;\&quot;org.apache.cordova.device.Device\&quot; &#x2F;&gt;&lt;&#x2F;feature&gt;&quot;,</span><br><span class="line">                            &quot;count&quot;: 1</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;xml&quot;: &quot;&lt;feature name&#x3D;\&quot;SplashScreen\&quot;&gt;&lt;param name&#x3D;\&quot;android-package\&quot; value&#x3D;\&quot;org.apache.cordova.splashscreen.SplashScreen\&quot; &#x2F;&gt;&lt;param name&#x3D;\&quot;onload\&quot; value&#x3D;\&quot;true\&quot; &#x2F;&gt;&lt;&#x2F;feature&gt;&quot;,</span><br><span class="line">                            &quot;count&quot;: 1</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;xml&quot;: &quot;&lt;feature name&#x3D;\&quot;Keyboard\&quot;&gt;&lt;param name&#x3D;\&quot;android-package\&quot; value&#x3D;\&quot;io.ionic.keyboard.IonicKeyboard\&quot; &#x2F;&gt;&lt;param name&#x3D;\&quot;onload\&quot; value&#x3D;\&quot;true\&quot; &#x2F;&gt;&lt;&#x2F;feature&gt;&quot;,</span><br><span class="line">                            &quot;count&quot;: 1</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;installed_plugins&quot;: &#123;</span><br><span class="line">        &quot;cordova-plugin-whitelist&quot;: &#123;</span><br><span class="line">            &quot;PACKAGE_NAME&quot;: &quot;io.ionic.starter&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;cordova-plugin-console&quot;: &#123;</span><br><span class="line">            &quot;PACKAGE_NAME&quot;: &quot;io.ionic.starter&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;cordova-plugin-statusbar&quot;: &#123;</span><br><span class="line">            &quot;PACKAGE_NAME&quot;: &quot;io.ionic.starter&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;cordova-plugin-device&quot;: &#123;</span><br><span class="line">            &quot;PACKAGE_NAME&quot;: &quot;io.ionic.starter&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;cordova-plugin-splashscreen&quot;: &#123;</span><br><span class="line">            &quot;PACKAGE_NAME&quot;: &quot;io.ionic.starter&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ionic-plugin-keyboard&quot;: &#123;</span><br><span class="line">            &quot;PACKAGE_NAME&quot;: &quot;io.ionic.starter&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;dependent_plugins&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="具体插件分析，以ionic-plugin-keyboard为例："><a href="#具体插件分析，以ionic-plugin-keyboard为例：" class="headerlink" title="具体插件分析，以ionic-plugin-keyboard为例："></a>具体插件分析，以ionic-plugin-keyboard为例：</h1><p><img src="/imgs/71.png"></p>
<p>由于plugin插件的定义遵循Cordova插件的相关规范，因此每一个插件的命名格式是一致的。在自定义一个新的插件时，我们也推荐这样做。插件中将不同平台的实现代码放在了各自对应的平台文件夹中（android/ios），在使用Ionic CLI 构建应用程序时，会根据不同平台的实现代码，生成对应不同平台的应用程序。</p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>plugins</tag>
        <tag>插件</tag>
        <tag>cordova</tag>
        <tag>基本知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 项目实战------插件原理</title>
    <url>/2020/11/24/ionic-plugin-theory/</url>
    <content><![CDATA[<p>在此之前，JS和原生的交互主要是通过WebView（Android）和UIWebView（iOS）进行，但在Ionic 3 中，Cordova提供了标准的API，来让JS和native进行数据交互。</p>
<p>在Android中，Cordova提供了exec（）方法，将访问原生的方法暴露给JS，而Java通过CordovaPlugin.execute（）方法与之进行数据对接</p>
<p><img src="/imgs/61.png"></p>
<p>以下是Cordova.exec（）方法说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova.exec(function(winParam) &#123;&#125;,</span><br><span class="line">             function(error) &#123;&#125;,</span><br><span class="line">             &quot;service&quot;,</span><br><span class="line">             &quot;action&quot;,</span><br><span class="line">             [&quot;firstArgument&quot;, &quot;secondArgument&quot;, 42, false]);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>function(winParam) {}：成功回调函数。假设您的 exec成功完成，此功能将随您传递给它的任何参数一起执行。</p>
</li>
<li><p>function(error) {}：错误回调函数。如果操作未成功完成，则此功能将执行可选的错误参数。</p>
</li>
<li><p>“service”：在本机端呼叫的服务名称。上面图中的java代码中未A.java，那么此处对应的就是A。</p>
</li>
<li><p>“action”：在本机端调用的动作名称。原生代码通过对action进行判断，从而知道JS让原生端执行什么样的功能。</p>
</li>
<li><p>[/* arguments */]：传到原生环境的参数数组。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>hybrid app</tag>
        <tag>Ionic3</tag>
        <tag>java</tag>
        <tag>javascript</tag>
        <tag>插件原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 项目实战------项目开发目录</title>
    <url>/2020/11/24/ionic-project-catalog/</url>
    <content><![CDATA[<p>在之前的文章中有提到项目的源码全部存放在项目根目录的src文件夹，我们之后所有的代码开发也是在该目录进行</p>
<p><img src="/imgs/58.png"></p>
<h1 id="app文件夹"><a href="#app文件夹" class="headerlink" title="app文件夹"></a>app文件夹</h1><h2 id="pp-component-ts-根组件"><a href="#pp-component-ts-根组件" class="headerlink" title="pp.component.ts 根组件"></a>pp.component.ts 根组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;</span><br><span class="line">import &#123; Platform &#125; from &#39;ionic-angular&#39;;</span><br><span class="line">import &#123; StatusBar &#125; from &#39;@ionic-native&#x2F;status-bar&#39;;</span><br><span class="line">import &#123; SplashScreen &#125; from &#39;@ionic-native&#x2F;splash-screen&#39;;</span><br><span class="line"></span><br><span class="line">import &#123; TabsPage &#125; from &#39;..&#x2F;pages&#x2F;tabs&#x2F;tabs&#39;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  templateUrl: &#39;app.html&#39;</span><br><span class="line">&#125;)</span><br><span class="line">export class MyApp &#123;</span><br><span class="line">  rootPage:any &#x3D; TabsPage;</span><br><span class="line"></span><br><span class="line">  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) &#123;</span><br><span class="line">    platform.ready().then(() &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; Okay, so the platform is ready and our plugins are available.</span><br><span class="line">      &#x2F;&#x2F; Here you can do any higher level native things you might need.</span><br><span class="line">      statusBar.styleDefault();</span><br><span class="line">      splashScreen.hide();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>平时所说的视图，主要定义了app整体的视觉表现，比如根页面、状态栏、启动界面等等。</p>
<h2 id="app-html-APP的根界面"><a href="#app-html-APP的根界面" class="headerlink" title="app.html APP的根界面"></a>app.html APP的根界面</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ion-nav [root]&#x3D;&quot;rootPage&quot;&gt;&lt;&#x2F;ion-nav&gt;</span><br></pre></td></tr></table></figure>

<p>相当于Android的MainActivity界面显示的内容</p>
<h2 id="app-module-ts-根模块文件"><a href="#app-module-ts-根模块文件" class="headerlink" title="app.module.ts 根模块文件"></a>app.module.ts 根模块文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; NgModule, ErrorHandler &#125; from &#39;@angular&#x2F;core&#39;;</span><br><span class="line">import &#123; BrowserModule &#125; from &#39;@angular&#x2F;platform-browser&#39;;</span><br><span class="line">import &#123; IonicApp, IonicModule, IonicErrorHandler &#125; from &#39;ionic-angular&#39;;</span><br><span class="line">import &#123; MyApp &#125; from &#39;.&#x2F;app.component&#39;;</span><br><span class="line"></span><br><span class="line">import &#123; AboutPage &#125; from &#39;..&#x2F;pages&#x2F;about&#x2F;about&#39;;</span><br><span class="line">import &#123; ContactPage &#125; from &#39;..&#x2F;pages&#x2F;contact&#x2F;contact&#39;;</span><br><span class="line">import &#123; HomePage &#125; from &#39;..&#x2F;pages&#x2F;home&#x2F;home&#39;;</span><br><span class="line">import &#123; TabsPage &#125; from &#39;..&#x2F;pages&#x2F;tabs&#x2F;tabs&#39;;</span><br><span class="line"></span><br><span class="line">import &#123; StatusBar &#125; from &#39;@ionic-native&#x2F;status-bar&#39;;</span><br><span class="line">import &#123; SplashScreen &#125; from &#39;@ionic-native&#x2F;splash-screen&#39;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    MyApp,</span><br><span class="line">    AboutPage,</span><br><span class="line">    ContactPage,</span><br><span class="line">    HomePage,</span><br><span class="line">    TabsPage</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    IonicModule.forRoot(MyApp)</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">  entryComponents: [</span><br><span class="line">    MyApp,</span><br><span class="line">    AboutPage,</span><br><span class="line">    ContactPage,</span><br><span class="line">    HomePage,</span><br><span class="line">    TabsPage</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    StatusBar,</span><br><span class="line">    SplashScreen,</span><br><span class="line">    &#123;provide: ErrorHandler, useClass: IonicErrorHandler&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>ionic是基于angular的，而angular是完全模块化的。配置项目中使用到的模块、组件、服务、管道、指令等。</p>
<h2 id="app-scss-全局样式文件"><a href="#app-scss-全局样式文件" class="headerlink" title="app.scss 全局样式文件"></a>app.scss 全局样式文件</h2><h2 id="main-ts-入口文件"><a href="#main-ts-入口文件" class="headerlink" title="main.ts 入口文件"></a>main.ts 入口文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; platformBrowserDynamic &#125; from &#39;@angular&#x2F;platform-browser-dynamic&#39;;</span><br><span class="line"></span><br><span class="line">import &#123; AppModule &#125; from &#39;.&#x2F;app.module&#39;;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure>

<p>在最初接触到网页开发时，都是用到一个js，就在HTML中增加一个 script 标签，现在只需要调用入口文件，然后由入口文件去引入其它依赖的文件。</p>
<h2 id="assets文件夹"><a href="#assets文件夹" class="headerlink" title="assets文件夹"></a>assets文件夹</h2><p>存放项目中使用到的各种资源</p>
<h2 id="pages文件夹"><a href="#pages文件夹" class="headerlink" title="pages文件夹"></a>pages文件夹</h2><p>存放APP中用到的所有界面，其下的一个文件夹就是独立的一个界面</p>
<p><img src="/imgs/59.png"></p>
<p>每一个界面文件夹下存放三个文件，分别是界面、模板样式和业务处理逻辑（用TypeScript—JavaScript的超级 语法编写）</p>
<h2 id="theme文件夹"><a href="#theme文件夹" class="headerlink" title="theme文件夹"></a>theme文件夹</h2><p>APP主题样式文件</p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>hybrid app</tag>
        <tag>Ionic3</tag>
        <tag>源码目录</tag>
        <tag>开发目录</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 介绍、安装、配置、项目不同平台编译、DeBug调试经验总结</title>
    <url>/2020/11/25/ionic-project-base-configuration/</url>
    <content><![CDATA[<h1 id="Ionic简介"><a href="#Ionic简介" class="headerlink" title="Ionic简介"></a>Ionic简介</h1><p>一个H5的移动应用开发框架，非常适合 Hybrid APP 混合开发模式，使用标准的HTML、 CSS和JavaScript，开发跨平台（目前支持：Android、iOS） 的原生App应用，ionic是一个轻量级别的手机UI库，具有速度快，界面现代化、美观等特点。</p>
<p>为了解决其他一些UI库在手机上运行缓慢的问题，它直接放弃了IOS6和Android4.1及以下的版本支持，来获取更好的使用体验。</p>
<p>主要包括三个部分：</p>
<ul>
<li>CSS框架 - 提供Native App质感的CSS样式模拟，ionic这部分的实现使用了ionicons图标样式库。</li>
<li>JavaScript框架 - 提供移动Web应用开发框架，ionic基于AngularJS基础框架开发，因此，自然遵循AngularJS的框架约束；此外，ionic使用AngularJS UI Router实现前端路由。</li>
<li>命令行/CLI - 命令行工具集，用来简化应用的开发、构造和仿真运行。ionic命令行工具使用了 Cordova，依赖于平台SDK（Android &amp; iOS）实现将移动web项目打包成原生app。</li>
</ul>
<p><img src="/imgs/75.png"></p>
<h1 id="Ionic安装"><a href="#Ionic安装" class="headerlink" title="Ionic安装"></a>Ionic安装</h1><p>参考地址：<a href="http://www.runoob.com/ionic/ionic-install.html">http://www.runoob.com/ionic/ionic-install.html</a></p>
<p>Tip：Node.js的版本必须为6+，npm版本为3+，才能正确的安装最新版的Ionic</p>
<h1 id="Cordova配置"><a href="#Cordova配置" class="headerlink" title="Cordova配置"></a>Cordova配置</h1><p>参考地址：<a href="http://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html">http://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html</a></p>
<p>Cordova支持的Android平台版本升级，参考地址<a href="http://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html">http://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html</a></p>
<h1 id="ndroid-IOS平台项目的创建与编译"><a href="#ndroid-IOS平台项目的创建与编译" class="headerlink" title="ndroid/IOS平台项目的创建与编译"></a>ndroid/IOS平台项目的创建与编译</h1><p>参考地址：<a href="http://www.runoob.com/ionic/ionic-install.html">http://www.runoob.com/ionic/ionic-install.html</a></p>
<p>以创建一个Android平台项目为例：</p>
<p>命令行输入命令，创建一个项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic start MyIonicProject tutorial</span><br></pre></td></tr></table></figure>

<p>start———————-会告诉CLI创建一个新的应用程序</p>
<p>MyIonicProject——-项目中的目录名称或应用程序名称</p>
<p>tutorial—————–作为您的项目的起始模板（官方提供的默认模板）</p>
<p>官方提供的默认模板：</p>
<p>tabs ：一个简单的3选项卡布局</p>
<p>sidemenu：侧面有可滑动菜单的布局</p>
<p>blank：一个单独的启动器</p>
<p>super：启动项目超过14个可以使用的页面设计</p>
<p>tutorial：引导项目</p>
<p>进入项目根目录，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic serve</span><br></pre></td></tr></table></figure>

<p>创建web站点, 自动打开项目的网址，ionic会监测www文件夹的文件是否发生变化, 从而实时用websocket通知浏览器进行刷新</p>
<h1 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h1><p>连接真机后，开启“开发者调试”模式后，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova run android</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>hybrid app</tag>
        <tag>简介</tag>
        <tag>安装配置</tag>
        <tag>编译调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Ionic 3 项目的工程目录结构</title>
    <url>/2020/11/25/ionic-project-construction/</url>
    <content><![CDATA[<p>在使用Ionic 3 创建项目后，添加platform，相关命令如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic start Demo tabs</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ionic cordova platform add android</span><br></pre></td></tr></table></figure>
<p>工程目录结构说明如下图（将鼠标悬停在图片上，右键，选择在新标签页中打开图片）</p>
<p><img src="/imgs/73.png"></p>
]]></content>
      <categories>
        <category>混合开发</category>
      </categories>
      <tags>
        <tag>Ionic</tag>
        <tag>hybrid app</tag>
        <tag>工程目录结构</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据类型转换</title>
    <url>/2020/11/25/java-array-data-type-transition/</url>
    <content><![CDATA[<p>数据类型：基本数据类型及引用数据类型</p>
<p>基本数据类型：byte、short、int、long、float、double、char及布尔类型（boolean）</p>
<blockquote>
<p>在Java语言中除布尔（boolean）类型外，其它数据类型均可进行相互转换</p>
</blockquote>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>自动类型转换、强制类型转换</p>
<h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><p>变量在做计算时，可能会出现溢出的情况，Java采用自动类型转换的方式处理：==占用内存小空间的数据类型向大空间的数据类型自动转换==</p>
<h3 id="整数类型的自动转换"><a href="#整数类型的自动转换" class="headerlink" title="整数类型的自动转换"></a>整数类型的自动转换</h3><blockquote>
<p>规律：byte、short、char在做计算时，会自动提升数据类型为int</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 变量演示，数据类型转换</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VariableDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        byte a &#x3D; 1;</span><br><span class="line">        &#x2F;&#x2F;错误: 不兼容的类型: 从int转换到byte可能会有损失</span><br><span class="line">        &#x2F;&#x2F;a定义为变量，编译检测：假设a取byte数据类型中的最大值时，与1做加运算将超出byte数据类型的取值范围，造成精度损失</span><br><span class="line">        &#x2F;&#x2F;byte b &#x3D; a + 1;</span><br><span class="line">        int b &#x3D; a + 1;</span><br><span class="line">        System.out.println(&quot;b &#x3D; &quot; + b);</span><br><span class="line"></span><br><span class="line">        short c &#x3D; 1;</span><br><span class="line">        &#x2F;&#x2F;short d &#x3D; c + 2;</span><br><span class="line">        &#x2F;&#x2F;short在运算时自动提升数据类型为int</span><br><span class="line">        int d &#x3D; c + 2;</span><br><span class="line">        System.out.println(&quot;d &#x3D; &quot; + d);</span><br><span class="line"></span><br><span class="line">        char e &#x3D; &#39;a&#39;;</span><br><span class="line">        &#x2F;&#x2F;char类型数据在参与运算时，每一个char类型的数据都对应一个数值类型的ASCII码，参与计算的是字符对应的ASCII码</span><br><span class="line">        int f &#x3D; e + 1;</span><br><span class="line">        System.out.println(&quot;f &#x3D; &quot; + f);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;short、byte与char任意类型组合运算，自动提升为int</span><br><span class="line">        int g &#x3D; a + c;</span><br><span class="line">        System.out.println(&quot;g &#x3D; &quot; + g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>int在与其他数据类型的数据计算达到溢出时，直接返回溢出后的数据值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 变量演示，数据类型转换</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VariableDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int intTypeMaxValue &#x3D; 2147483647;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        计算过程：</span><br><span class="line">        1、计算机能直接识别的代码为二进制代码</span><br><span class="line">        2、2147483647 转换为二进制码：int数据类型占内存大小4个字节，1个字节占8个位，首位为符号位</span><br><span class="line">            0111 1111  1111 1111  1111 1111  1111 1111</span><br><span class="line">        3、1 转换为二进制码</span><br><span class="line">            1</span><br><span class="line">        4、两者相加结果（二进制）</span><br><span class="line">            1000 0000  0000 0000  0000 0000  0000 0000</span><br><span class="line">        5、两者相加结果（十进制）</span><br><span class="line">            -2147483648</span><br><span class="line">         *&#x2F;</span><br><span class="line">        long resultValue &#x3D; intTypeMaxValue + 1;</span><br><span class="line">        &#x2F;&#x2F;输出 resultValue &#x3D; -2147483648</span><br><span class="line">        System.out.println(&quot;resultValue &#x3D; &quot; + resultValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>任何整数类型与long类型做运算，都自动转换为long类型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 变量演示，数据类型转换</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VariableDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        byte number1 &#x3D; 1;</span><br><span class="line">        long number2 &#x3D; 2;</span><br><span class="line">        &#x2F;&#x2F;错误: 不兼容的类型: 从long转换到byte可能会有损失，也就是说 number1 + number2 的结果为long数据类型</span><br><span class="line">        &#x2F;&#x2F;byte result &#x3D; number1 + number2;</span><br><span class="line">        long result &#x3D; number1 + number2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常量在做运算时，只要不超出定义的数据类型的范围就不会出错，也不会发生类型的自动提升</p>
</blockquote>
<h4 id="小数类型的自动转换"><a href="#小数类型的自动转换" class="headerlink" title="小数类型的自动转换"></a>小数类型的自动转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 变量演示，数据类型转换</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VariableDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        float a &#x3D; 1.2f;</span><br><span class="line">        &#x2F;&#x2F;float类型与常量计算，不会出现类型自动提升</span><br><span class="line">        float b &#x3D; a + 1;</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;float与float计算，不会出现类型自动提升</span><br><span class="line">        float c &#x3D; a + b;</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        byte byteValue &#x3D; 1;</span><br><span class="line">        short shortValue &#x3D; 1;</span><br><span class="line">        int intValue &#x3D; 1;</span><br><span class="line">        long longValue &#x3D; 1;</span><br><span class="line">        &#x2F;&#x2F;float类型和所有整数类型计算都会转换成float</span><br><span class="line">        float d &#x3D; a + shortValue;</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;double类型同理</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;double 与 float 计算，类型自动转换成 double</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==总结：不同数据类型参与计算后，结果自动向大的一个数据类型转换==</p>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>占用内存大空间数据类型 向 小空间数据类型 转换</p>
<blockquote>
<p>语法：（目标数据类型） 转换的变量;</p>
</blockquote>
<h2 id="整数类型的强制转换"><a href="#整数类型的强制转换" class="headerlink" title="整数类型的强制转换"></a>整数类型的强制转换</h2><p>==强制类型转换可能存在损失精度的情况：转换的数值超出目标转换类型==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 变量演示，数据类型转换</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VariableDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int number &#x3D; 100;</span><br><span class="line">        &#x2F;&#x2F;short result &#x3D; number;</span><br><span class="line">        &#x2F;&#x2F;将int强制类型转换为short</span><br><span class="line">        short result &#x3D; (short) number;</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;将int强制类型转换为 byte</span><br><span class="line">        byte result1 &#x3D; (byte) number;</span><br><span class="line">        System.out.println(result1);</span><br><span class="line"></span><br><span class="line">        long number1 &#x3D; 12;</span><br><span class="line">        byte result2 &#x3D; (byte) number1;</span><br><span class="line">        System.out.println(result2);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小数类型的强制转换"><a href="#小数类型的强制转换" class="headerlink" title="小数类型的强制转换"></a>小数类型的强制转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 变量演示，数据类型转换</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class VariableDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        float a &#x3D; 1.1f;</span><br><span class="line">        &#x2F;&#x2F;小数转换为整数类型（long、int、short及byte）后会舍弃小数位</span><br><span class="line">        int result1 &#x3D; (int) a;</span><br><span class="line">        System.out.println(result1);</span><br><span class="line"></span><br><span class="line">        double b &#x3D; 2.1;</span><br><span class="line">        float result2 &#x3D; (float) b;</span><br><span class="line">        System.out.println(result2);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;char类型可转换为byte、short、int、long、float及double</span><br><span class="line">        char c &#x3D; &#39;a&#39;;</span><br><span class="line">        byte result3 &#x3D; (byte) c;</span><br><span class="line">        System.out.println(result3);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;整数类型转换为char字符类型</span><br><span class="line">        char result4 &#x3D; (char) 97;</span><br><span class="line">        System.out.println(result4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java开发基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据类型</tag>
        <tag>基本数据类型</tag>
        <tag>引用数据类型</tag>
        <tag>转换</tag>
      </tags>
  </entry>
  <entry>
    <title>数组在声明时的小建议</title>
    <url>/2020/11/25/java-array-statement-suggest/</url>
    <content><![CDATA[<p>此处不再赘述如何声明一个数组，看以下声明：</p>
<p>方式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int initArray[] &#x3D; new int[6];</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] initArray &#x3D; new int[6];</span><br></pre></td></tr></table></figure>

<p>这里着重强调的是：建议将“[]”跟在数据类型之后，作为数据类型的一部分，而不是将“[]”跟在变量名之后；当然，这只是一种建议。</p>
]]></content>
      <categories>
        <category>Java开发基础</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>声明</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础面试题：int 与 Integer 的区别</title>
    <url>/2020/11/24/java-mst-int-integer/</url>
    <content><![CDATA[<p>1 int是基本数据类型，Integer是int的包装类，包装类中提供了对整数的操作方法，int和Integer可以自动装箱和拆箱</p>
<p>2 当int、Integer作为类的属性声明时的类型时，int的默认值是0，Integer的默认值是null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package net.csdn.blog.karen;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 包装类演示</span><br><span class="line"> * </span><br><span class="line"> * @author：Karen Chia</span><br><span class="line"> * @date：2018年11月13日 上午9:32:06</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ClazzDemo &#123;</span><br><span class="line"></span><br><span class="line">	private static int intVal;</span><br><span class="line">	private static Integer integerVal;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		System.out.println(&quot;int类型的初始值 &#x3D; &quot; + intVal);</span><br><span class="line">		System.out.println(&quot;Integer类型的初始值 &#x3D; &quot; + integerVal);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int类型的初始值 &#x3D; 0</span><br><span class="line">Integer类型的初始值 &#x3D; null</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题 - Java</category>
      </categories>
      <tags>
        <tag>Java面试题</tag>
        <tag>int</tag>
        <tag>integer</tag>
        <tag>区别</tag>
        <tag>异同点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础面试题：String与StringBuffer的区别</title>
    <url>/2020/11/24/java-mst-string-stringbuffer/</url>
    <content><![CDATA[<p>1 String被创建后，值不能被改变，如果参与了操作，引用发生变化，不是在原有的字符串上操作，而是产生一个新的字符串</p>
<p>2 StringBuffer被创建后，值能被改变，如果参与了操作，引用不会发生变化，在原有的字符串上操作，线程安全</p>
]]></content>
      <categories>
        <category>面试题 - Java</category>
      </categories>
      <tags>
        <tag>Java面试题</tag>
        <tag>区别</tag>
        <tag>异同点</tag>
        <tag>String</tag>
        <tag>StringBuffer</tag>
      </tags>
  </entry>
  <entry>
    <title>极光：Unable to get provider cn.jpush.android.service.DownloadProvider</title>
    <url>/2020/11/23/jpush-download-provider/</url>
    <content><![CDATA[<p><strong>转载文章 原文出处：<a href="https://blog.csdn.net/qq_36347817/article/details/88552732">https://blog.csdn.net/qq_36347817/article/details/88552732</a></strong></p>
<p>最近需要将公司以前的项目，安装在一个版本为4.4.2的安卓板子上，准备降级操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">报错：java.lang.RuntimeException: Unable to get provider com.amitshekhar.DebugDBInitProvider: java.lang.ClassNotFoundException: Didn&#39;t find class</span><br></pre></td></tr></table></figure>
<p>项目中是由于multiDex配置原因。</p>
<p>因为以前支持版本号为21，现在使用 multidex 需要引入谷歌提供的 android-support-multidex.jar 包。</p>
<p>解决方法：</p>
<p>1.defaultConfig 中添加 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        ······</span><br><span class="line"> </span><br><span class="line">        multiDexEnabled true</span><br><span class="line"> </span><br><span class="line">        ······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.dependencies 中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &#39;com.android.support:multidex:1.0.3&#39;</span><br></pre></td></tr></table></figure>
<p>3.代码中加入支持 multidex 的功能：</p>
<p>重写 Application 的 attachBaseContext 方法。</p>
<p>在该方法里面加入MultiDex.install(this)，这个方法比 Application 的 onCreate 要先执行。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void attachBaseContext(Context base)&#123;</span><br><span class="line">    super.attachBaseContext(base);</span><br><span class="line">    MultiDex.install(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.重新运行</p>
]]></content>
      <categories>
        <category>Android开发问题汇总</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>极光</tag>
        <tag>DownloadProvider</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础面试题：使用最快的效率将2变成8</title>
    <url>/2020/11/24/java-mst-2-to-8/</url>
    <content><![CDATA[<h2 id="Java基础面试题：使用最快的效率将2变成8"><a href="#Java基础面试题：使用最快的效率将2变成8" class="headerlink" title="Java基础面试题：使用最快的效率将2变成8"></a>Java基础面试题：使用最快的效率将2变成8</h2><blockquote>
<p>原理：将被转换的数字进行位移运算</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package blog.csdn.net.karen.javasedemo;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 位移运算演示</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by Karen Chia on 2018&#x2F;11&#x2F;8</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class OperatorDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        byte number1 &#x3D; 2;</span><br><span class="line">        byte res &#x3D; (byte) (number1 &lt;&lt; 2);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="演算过程"><a href="#演算过程" class="headerlink" title="演算过程"></a>演算过程</h3><p>1 本文中将被转换的数字定为 byte 数据类型，只是为了演示方便，定为其它数据类型均可<br>2 表达式 ==number1 &lt;&lt; 2== 说明：将数字 number1 对应的二进制数左移2位，空出的低位使用“0”补足<br>3 数字 2 的二进制表示：byte类型占内存空间为1个字节，1个字节为8个位<br>| 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |<br>|–|–|–|–|–|–|–|–|<br>4 将2的二进制表示数左移2位<br>| 0 | 0 | 0 | 0 | 1 | 0 |  |  |<br>|–|–|–|–|–|–|–|–|<br>5 二进制数被移动后，空出的低位用“0”补齐<br>| 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 |<br>|–|–|–|–|–|–|–|–|<br>将以上二进制数转换为十进制表示，结果为8</p>
]]></content>
      <categories>
        <category>面试题 - Java</category>
      </categories>
      <tags>
        <tag>Java面试题</tag>
        <tag>数字转换</tag>
        <tag>最快效率将2转换为8</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2020/11/25/markdown-base-grammar/</url>
    <content><![CDATA[<p>本文仅用于对Markdown基本语法的记录，便于查看，如有任何错误，敬请谅解！</p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法</p>
<h1 id="有序列表与无序列表"><a href="#有序列表与无序列表" class="headerlink" title="有序列表与无序列表"></a>有序列表与无序列表</h1><p>在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3.符号要和文字之间加上一个字符的空格。</p>
<h1 id="如果你需要引用一小段别处的句子，那么就要用引用的格式"><a href="#如果你需要引用一小段别处的句子，那么就要用引用的格式" class="headerlink" title="如果你需要引用一小段别处的句子，那么就要用引用的格式"></a>如果你需要引用一小段别处的句子，那么就要用引用的格式</h1><p>例如这样</p>
<p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p>
<h1 id="插入链接与插入图片"><a href="#插入链接与插入图片" class="headerlink" title="插入链接与插入图片"></a>插入链接与插入图片</h1><p>图片为：<img src="">{ImgCap}{/ImgCap}</p>
<p>链接为：<a href="http://baidu.com/">百度</a></p>
<h1 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h1><p>用两个 * 包含一段文本就是粗体的语法</p>
<p>用一个 * 包含一段文本就是斜体的语法。</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
<tr>
<td>Are</td>
<td align="center">Cool</td>
<td align="right"></td>
</tr>
<tr>
<td>————-</td>
<td align="center">:————-:</td>
<td align="right">—–:</td>
</tr>
<tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><p>两个 ` 把中间的代码包裹起来</p>
<p>使用 tab 键即可缩进</p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线的语法只需要三个 * 号</p>
]]></content>
      <categories>
        <category>MarkDown编辑器</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>标准</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Butterfly 最新评论 newest-comments 401/资源加载错误（无法获取资料，请确认相关配置是否正确）</title>
    <url>/2020/11/20/newest-comments/</url>
    <content><![CDATA[<p>集成 Butterfly 博客主题中，在配置最新评论 newest comments 时，根据 Butterfly 的配置文档配置完成后，最新评论一直无法显示，提示错误信息：无法获取资料，请确认相关配置是否正确<br><img src="/imgs/newest-comments-401.jpg"></p>
<p>在网页调试模式下，给出的错误信息大致是：找不到加载的资源 401</p>
<h1 id="newest-comments-的配置信息"><a href="#newest-comments-的配置信息" class="headerlink" title="newest_comments 的配置信息"></a>newest_comments 的配置信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Aside widget - Newest Comments</span><br><span class="line">newest_comments:</span><br><span class="line">  enable: true</span><br><span class="line">  limit: 6</span><br><span class="line">  avatar: true</span><br><span class="line">  leancloud:</span><br><span class="line">    enable: true</span><br><span class="line">    appId: XXX # leancloud application app id</span><br><span class="line">    appKey: XXX # leancloud application app key</span><br><span class="line">    serverURL: XXX # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">    default_avatar: mp #mp&#x2F;identicon&#x2F;monsterid&#x2F;wavatar&#x2F;retro&#x2F;robohash&#x2F;blank</span><br><span class="line">  github_issues:</span><br><span class="line">    enable: true</span><br><span class="line">    repo: </span><br><span class="line">  # disqus:</span><br><span class="line">  #   enable: true</span><br><span class="line">  #   forum:</span><br><span class="line">  #   api_key:</span><br></pre></td></tr></table></figure>

<p>Butterfly 的主题配置文件中是默认从 Valine 、 disqus 评论插件中读取评论信息，由于 disqus 的访问速度太慢，在我的博客中就没有使用 disqus ，故而将其注解。</p>
<p>而问题也就出在这里 。。。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我在这里做出假设：Butterfly 最新评论的显示，需要在其配置文件中至少配置两种不同类型的评论插件。</p>
<p>上文提到，Butterfly 在最新评论处默认配置的 disqus 插件已被注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># disqus</span><br><span class="line"># https:&#x2F;&#x2F;disqus.com&#x2F;</span><br><span class="line">disqus:</span><br><span class="line">  shortname:</span><br></pre></td></tr></table></figure>
<p>故而，上面这里关于 disqus 的配置是空的。</p>
<p>在网上找了很长时间的资料，无奈，关于当前问题的文章实在是少之又少，也没有什么具体的解决方法。和 Butterfly 作者联系后，也尝试过些方法，还是没有得到解决 。。。</p>
<p>最终，我考虑换其它的评论插件，因为 Butterfly 中集成了很多的评论插件，也方便集成，具体可查看其文档。就当我集成其它插件结束后，运行本地服务时，最新评论显示出来了<br><img src="/imgs/newest-comments-count.png"></p>
<p>这里集成的插件任意选择一种（已集成的插件除外）即可。</p>
<blockquote>
<p>在本地服务运行期间，之前已经集成的插件并未删除。此时，在配置文件中配置了两种评论插件，我这里配置的是 Valine 和 Twikoo。</p>
</blockquote>
<p>具体的问题原因，其实并没有找到，配置到这里后，最新评论能正常显示了，我就结束了配置。如果你有相关的解决方案，欢迎在评论区留下你的宝贵意见 ！！！</p>
<h2 id="Valine-配置信息"><a href="#Valine-配置信息" class="headerlink" title="Valine 配置信息"></a>Valine 配置信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># valine</span><br><span class="line"># https:&#x2F;&#x2F;valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  appId: XXX # leancloud application app id</span><br><span class="line">  appKey: XXX # leancloud application app key</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar</span><br><span class="line">  lang: zh-CN # i18n: zh-CN&#x2F;zh-TW&#x2F;en&#x2F;ja</span><br><span class="line">  placeholder: 记得留下你的昵称和邮箱....可以快速收到回復 # valine comment input placeholder (like: Please leave your footprints)</span><br><span class="line">  guest_info: nick,mail,link # valine comment header info (nick&#x2F;mail&#x2F;link)</span><br><span class="line">  recordIP: false # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: # valine background</span><br><span class="line">  emojiCDN: # emoji CDN</span><br><span class="line">  enableQQ: false # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields (nick&#x2F;mail)</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure>

<h2 id="Twikoo-配置信息"><a href="#Twikoo-配置信息" class="headerlink" title="Twikoo 配置信息"></a>Twikoo 配置信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Twikoo</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;imaegoo&#x2F;twikoo</span><br><span class="line">twikoo: XXX</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo配置问题汇总</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>Butterfly</tag>
        <tag>newest-comments</tag>
        <tag>评论</tag>
        <tag>401</tag>
        <tag>资源加载</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView系列 - RecyclerView的基本使用</title>
    <url>/2020/11/24/recycleview-base-use/</url>
    <content><![CDATA[<blockquote>
<p>文章欢迎转载，转载请注明出处：文章首发于【Karen Chia の 程序人生】<a href="https://blog.csdn.net/ZhaiKun68/article/details/100557688">RecyclerView系列 - RecyclerView的基本使用</a></p>
</blockquote>
<h1 id="按照惯例，先上效果图"><a href="#按照惯例，先上效果图" class="headerlink" title="按照惯例，先上效果图"></a>按照惯例，先上效果图</h1><p><img src="https://img-blog.csdnimg.cn/20190905165047660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>效果图不是我想要的效果，怎么办？</p>
<p>查看关于 RecyclerView 系列的其它文章，总有你想要的效果 ↓↓↓</p>
<h2 id="KarenChia-的-RecyclerView-系列文章"><a href="#KarenChia-的-RecyclerView-系列文章" class="headerlink" title="KarenChia 的 RecyclerView 系列文章"></a>KarenChia 的 RecyclerView 系列文章</h2><p><a href="https://blog.csdn.net/ZhaiKun68/article/details/100557688">RecyclerView系列 - RecyclerView的基本使用</a></p>
<p><a href="https://blog.csdn.net/ZhaiKun68/article/details/100591943">RecyclerView系列 - 如何优雅的实现分割线</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>RecyclerView 在本文发布之前，已经出来很久了，之前也有很多关于 RecyclerView 的优秀文章，那我为什么还要在这里写下本文呢，实不相瞒，我是 ListView 的忠实粉，之前很少使用到 RecyclerView，最近发现了不少关于 RecyclerView 的优秀框架，于是开始使用 RecyclerView，在使用第三方优秀框架的同时，也需要了解框架背后对组件进行的处理及封装，便于后期对项目维护。</p>
<h1 id="为什么选择-RecyclerView？"><a href="#为什么选择-RecyclerView？" class="headerlink" title="为什么选择 RecyclerView？"></a>为什么选择 RecyclerView？</h1><p>相对于 ListView、GridView 这类滑动列表组件来说，RecyclerView 具有：</p>
<ul>
<li>使用更加灵活<br>1 通过设置布局管理器，可轻松实现组件列表垂直滑动或水平滑动效果<br>2 给列表的 item 项设置【增加或删除】动画<br>3 当列表组件滑动到顶端或底部时，带有波纹效果，更显列表立体感</li>
<li>代码高度解耦<br>代码高幅度降低了耦合度，维护起来非常方便</li>
<li>拓展方便<br>1 轻松实现 ListView 及 Gridview 组件的相关列表效果，学会 RecyclerView，相当于学会了 ListView + Gridview<br>2 难得一见的【瀑布流】列表滑动效果</li>
</ul>
<h1 id="RecyclerView-不是万能的，存在以下不足："><a href="#RecyclerView-不是万能的，存在以下不足：" class="headerlink" title="RecyclerView 不是万能的，存在以下不足："></a>RecyclerView 不是万能的，存在以下不足：</h1><ul>
<li>不像 ListView那样，它没有分割线的设置方法</li>
<li>没有实现 item 的相关点击事件</li>
</ul>
<p><strong>但是，重点来了：</strong></p>
<p>也正是由于 RecyclerView 存在的这些缺点，我们不就可以根据自己的需求去定义嘛，怎么开心怎么玩！！！</p>
<p>下面开始进入我们今天的主题 ↓↓↓</p>
<h1 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1 添加依赖"></a>1 添加依赖</h1><p>在 module（一般都是在 app 下） 的 build.gradle 文件下添加组件依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &#39;androidx.recyclerview:recyclerview:1.0.0&#39;</span><br></pre></td></tr></table></figure>
<p><strong>注意：由于使用的 Android Studio 版本不同，依赖语句也有所不同，我这里使用的 AS 版本是 V3.4.1</strong> </p>
<h1 id="2-在布局文件中使用-RecyclerView"><a href="#2-在布局文件中使用-RecyclerView" class="headerlink" title="2 在布局文件中使用 RecyclerView"></a>2 在布局文件中使用 RecyclerView</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:background&#x3D;&quot;@color&#x2F;app_bg&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;rvTest&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h1 id="3-为-RecycleView-设置布局管理器-LinearLayoutManager"><a href="#3-为-RecycleView-设置布局管理器-LinearLayoutManager" class="headerlink" title="3 为 RecycleView 设置布局管理器 LinearLayoutManager"></a>3 为 RecycleView 设置布局管理器 LinearLayoutManager</h1><p>这里列表默认是垂直滑动的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rvTest.setLayoutManager(new LinearLayoutManager(this));</span><br></pre></td></tr></table></figure>
<p>不要问我为什么，问就【看源码】，看 LinearLayoutManager 构造器源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Creates a vertical LinearLayoutManager</span><br><span class="line"> *</span><br><span class="line"> * @param context Current context, will be used to access resources.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public LinearLayoutManager(Context context) &#123;</span><br><span class="line">    this(context, RecyclerView.DEFAULT_ORIENTATION, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于 DEFAULT_ORIENTATION 的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static final int DEFAULT_ORIENTATION &#x3D; VERTICAL;</span><br></pre></td></tr></table></figure>
<p>关于 VERTICAL 的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static final int VERTICAL &#x3D; LinearLayout.VERTICAL;</span><br></pre></td></tr></table></figure>
<p>源码中使用的属性还是线性布局 LinearLayout 的垂直属性</p>
<p>那么问题来了，我要让 RecyclerView 水平滑动怎么办？</p>
<h2 id="3-1-设置-RecyclerView-列表水平滑动"><a href="#3-1-设置-RecyclerView-列表水平滑动" class="headerlink" title="3.1 设置 RecyclerView 列表水平滑动"></a>3.1 设置 RecyclerView 列表水平滑动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinearLayoutManager mLinearLayoutManager &#x3D; new LinearLayoutManager(this);</span><br><span class="line">mLinearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">rvTest.setLayoutManager(mLinearLayoutManager);</span><br></pre></td></tr></table></figure>

<h1 id="4-设置-item-增加和删除时的动画效果"><a href="#4-设置-item-增加和删除时的动画效果" class="headerlink" title="4 设置 item 增加和删除时的动画效果"></a>4 设置 item 增加和删除时的动画效果</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rvTest.setItemAnimator(new DefaultItemAnimator());</span><br></pre></td></tr></table></figure>
<p>这里设置的是 RecyclerView 默认的动画效果</p>
<h1 id="5-设置适配器"><a href="#5-设置适配器" class="headerlink" title="5 设置适配器"></a>5 设置适配器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mRecyclerViewTestAdapter &#x3D; new RecyclerViewTestAdapter(this, testData);</span><br><span class="line">rvTest.setAdapter(mRecyclerViewTestAdapter);</span><br></pre></td></tr></table></figure>
<p>RecyclerView 的适配器继承至 RecyclerView.Adapter &lt; VH extends ViewHolder &gt;，泛型类型为ViewHolder。</p>
<p>RecyclerView 对 ViewHolder 进行了封装，使得我们使用起来更加的方便，自定义的 ViewHolder 只需继承 RecyclerView.ViewHolder 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.karenchia.andprimarylp.adapter;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.view.LayoutInflater;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.NonNull;</span><br><span class="line">import androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line">import com.karenchia.andprimarylp.R;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import butterknife.BindView;</span><br><span class="line">import butterknife.ButterKnife;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * RecyclerView 测试数据适配器</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by KarenChia on 2019&#x2F;9&#x2F;4.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RecyclerViewTestAdapter extends RecyclerView.Adapter&lt;RecyclerViewTestAdapter.RecyclerViewTestViewHolder&gt; &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 上下文对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Context mContext;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 测试数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private List&lt;String&gt; testDataList;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 函数构造器</span><br><span class="line">     *</span><br><span class="line">     * @param mContext     上下文对象</span><br><span class="line">     * @param testDataList 测试数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public RecyclerViewTestAdapter(Context mContext, List&lt;String&gt; testDataList) &#123;</span><br><span class="line">        this.mContext &#x3D; mContext;</span><br><span class="line">        this.testDataList &#x3D; testDataList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 加载 item 的布局文件</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public RecyclerViewTestViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;</span><br><span class="line">        return new RecyclerViewTestViewHolder(</span><br><span class="line">                LayoutInflater.from(mContext).inflate(R.layout.item_recycler_view_test, parent, false));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将数据与 item 视图进行绑定</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull RecyclerViewTestViewHolder holder, int position) &#123;</span><br><span class="line">        holder.tvData.setText(testDataList.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return testDataList &#x3D;&#x3D; null ? 0 : testDataList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * RecycleView 中 ViewHolder 的定义方式</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public class RecyclerViewTestViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        @BindView(R.id.tvData)</span><br><span class="line">        TextView tvData;</span><br><span class="line"></span><br><span class="line">        public RecyclerViewTestViewHolder(@NonNull View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            ButterKnife.bind(this, itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>列表 item 布局文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">    android:padding&#x3D;&quot;10dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;tvData&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:textColor&#x3D;&quot;@android:color&#x2F;black&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>至此，RecyclerView 的基本用法结束。</p>
<h1 id="6-相关类的代码"><a href="#6-相关类的代码" class="headerlink" title="6 相关类的代码"></a>6 相关类的代码</h1><p>这里贴一下相关类的代码实现</p>
<p>项目使用的是 MVP 模式，别问我为什么要使用 MVP 模式，问就请看这里：<a href="https://blog.csdn.net/ZhaiKun68/article/details/100033584#1_AndroidMVP_3">https://blog.csdn.net/ZhaiKun68/article/details/100033584#1_AndroidMVP_3</a></p>
<h2 id="6-1-RecyclerViewDemoContract-类"><a href="#6-1-RecyclerViewDemoContract-类" class="headerlink" title="6.1 RecyclerViewDemoContract 类"></a>6.1 RecyclerViewDemoContract 类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.karenchia.andprimarylp.ui.contract;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * MVP 模式接口抽取</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by KarenChia on 2019&#x2F;9&#x2F;4.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface RecyclerViewDemoContract &#123;</span><br><span class="line"></span><br><span class="line">    interface Model &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 加载测试数据</span><br><span class="line">         *</span><br><span class="line">         * @return 测试数据</span><br><span class="line">         *&#x2F;</span><br><span class="line">        List&lt;String&gt; testData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface View &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 显示测试数据列表</span><br><span class="line">         *</span><br><span class="line">         * @param testData 测试数据</span><br><span class="line">         *&#x2F;</span><br><span class="line">        void showTestData(List&lt;String&gt; testData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface Presenter &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 获取测试数据</span><br><span class="line">         *&#x2F;</span><br><span class="line">        void getTestData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6-2-RecyclerViewDemoModel-类"><a href="#6-2-RecyclerViewDemoModel-类" class="headerlink" title="6.2 RecyclerViewDemoModel 类"></a>6.2 RecyclerViewDemoModel 类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.karenchia.andprimarylp.ui.model;</span><br><span class="line"></span><br><span class="line">import com.karenchia.andprimarylp.ui.contract.RecyclerViewDemoContract;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * model 层数据逻辑处理</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by KarenChia on 2019&#x2F;9&#x2F;4.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RecyclerViewDemoModel implements RecyclerViewDemoContract.Model &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 加载测试数据</span><br><span class="line">     *</span><br><span class="line">     * @return 测试数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; testData() &#123;</span><br><span class="line">        List&lt;String&gt; testData &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 20; i++) &#123;</span><br><span class="line">            testData.add(&quot;我是 Karen Chia &quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">        return testData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6-3-RecyclerViewDemoActivity-类"><a href="#6-3-RecyclerViewDemoActivity-类" class="headerlink" title="6.3 RecyclerViewDemoActivity 类"></a>6.3 RecyclerViewDemoActivity 类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.karenchia.andprimarylp.ui.activity.newfeature;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line">import androidx.recyclerview.widget.DefaultItemAnimator;</span><br><span class="line">import androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line">import androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line">import com.karenchia.andprimarylp.R;</span><br><span class="line">import com.karenchia.andprimarylp.adapter.RecyclerViewTestAdapter;</span><br><span class="line">import com.karenchia.andprimarylp.ui.contract.RecyclerViewDemoContract;</span><br><span class="line">import com.karenchia.andprimarylp.ui.presenter.RecyclerViewDemoPresenter;</span><br><span class="line">import com.socks.library.KLog;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import butterknife.BindView;</span><br><span class="line">import butterknife.ButterKnife;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * RecyclerView 演示类 view 层逻辑处理</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by KarenChia on 2019&#x2F;9&#x2F;3.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RecyclerViewDemoActivity extends AppCompatActivity implements RecyclerViewDemoContract.View &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * view层与model层交互的桥梁</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private RecyclerViewDemoContract.Presenter mPresenter;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * RecyclerView 组件</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @BindView(R.id.rvTest)</span><br><span class="line">    RecyclerView rvTest;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * RecyclerView 的数据适配器</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private RecyclerViewTestAdapter mRecyclerViewTestAdapter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_recycler_view_demo);</span><br><span class="line">        ButterKnife.bind(this);</span><br><span class="line">        mPresenter &#x3D; new RecyclerViewDemoPresenter(this);</span><br><span class="line">        initData();</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        mPresenter.getTestData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 组件初始化</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        &#x2F;&#x2F;为 RecycleView 设置布局管理器</span><br><span class="line">        rvTest.setLayoutManager(new LinearLayoutManager(this));</span><br><span class="line">        &#x2F;&#x2F;LinearLayoutManager mLinearLayoutManager &#x3D; new LinearLayoutManager(this);</span><br><span class="line">        &#x2F;&#x2F;mLinearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line">        &#x2F;&#x2F;rvTest.setLayoutManager(mLinearLayoutManager);</span><br><span class="line">        &#x2F;&#x2F;设置 item 增加和删除时的动画效果</span><br><span class="line">        rvTest.setItemAnimator(new DefaultItemAnimator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 显示测试数据列表</span><br><span class="line">     *</span><br><span class="line">     * @param testData 测试数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void showTestData(List&lt;String&gt; testData) &#123;</span><br><span class="line">        &#x2F;&#x2F;设置适配器</span><br><span class="line">        mRecyclerViewTestAdapter &#x3D; new RecyclerViewTestAdapter(this, testData);</span><br><span class="line">        rvTest.setAdapter(mRecyclerViewTestAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6-4-RecyclerViewDemoPresenter-类"><a href="#6-4-RecyclerViewDemoPresenter-类" class="headerlink" title="6.4 RecyclerViewDemoPresenter 类"></a>6.4 RecyclerViewDemoPresenter 类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.karenchia.andprimarylp.ui.presenter;</span><br><span class="line"></span><br><span class="line">import com.karenchia.andprimarylp.ui.contract.RecyclerViewDemoContract;</span><br><span class="line">import com.karenchia.andprimarylp.ui.model.RecyclerViewDemoModel;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * model层 与 View层 通信的桥梁</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Created by KarenChia on 2019&#x2F;9&#x2F;4.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RecyclerViewDemoPresenter implements RecyclerViewDemoContract.Presenter &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * model层数据逻辑处理</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private RecyclerViewDemoContract.Model mModel;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * view层交互逻辑处理</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private RecyclerViewDemoContract.View mView;</span><br><span class="line"></span><br><span class="line">    public RecyclerViewDemoPresenter(RecyclerViewDemoContract.View mView) &#123;</span><br><span class="line">        mModel &#x3D; new RecyclerViewDemoModel();</span><br><span class="line">        this.mView &#x3D; mView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取测试数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void getTestData() &#123;</span><br><span class="line">        mView.showTestData(mModel.testData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android开发基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>RecycleView</tag>
        <tag>ListView</tag>
        <tag>GridView</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView系列 - 如何优雅的实现分割线</title>
    <url>/2020/11/24/recycleview-line/</url>
    <content><![CDATA[<blockquote>
<p>文章欢迎转载，转载请注明出处：文章首发于<a href="https://blog.csdn.net/zhaikun68">【Karen Chia の 程序人生】</a><a href="https://blog.csdn.net/ZhaiKun68/article/details/100591943">RecyclerView系列 - 如何优雅的实现分割线</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190907111120364.gif" alt="在这里插入图片描述"><br>效果图不是我想要的效果，怎么办？</p>
<p>查看关于 RecyclerView 系列的其它文章，总有你想要的效果 ↓↓↓</p>
<h2 id="KarenChia-的-RecyclerView-系列文章"><a href="#KarenChia-的-RecyclerView-系列文章" class="headerlink" title="KarenChia 的 RecyclerView 系列文章"></a>KarenChia 的 RecyclerView 系列文章</h2><p><a href="https://blog.csdn.net/ZhaiKun68/article/details/100557688">RecyclerView系列 - RecyclerView的基本使用</a></p>
<p><a href="https://blog.csdn.net/ZhaiKun68/article/details/100591943">RecyclerView系列 - 如何优雅的实现分割线</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 RecyclerView 系列文章中，上一篇我们说到了 RecyclerView 的基本使用，期间提到了 RecyclerView 自身是不能设置分割线的，需要自行设置。本篇文章将从不同的“视角”讲解 RecyclerView 分割线的设置方法，文章建立在上一篇文章【<a href="https://blog.csdn.net/ZhaiKun68/article/details/100557688">RecyclerView系列 - RecyclerView的基本使用</a>】的基础上，如果需要了解 RecyclerView 的基本使用、布局管理器的设置、数据适配器的设置等，请自行查看【<a href="https://blog.csdn.net/ZhaiKun68/article/details/100557688">RecyclerView系列 - RecyclerView的基本使用</a>】</p>
<h1 id="1-RecyclerView-分割线设置方式一"><a href="#1-RecyclerView-分割线设置方式一" class="headerlink" title="1 RecyclerView 分割线设置方式一"></a>1 RecyclerView 分割线设置方式一</h1><h6 id="更改列表子项-item-布局"><a href="#更改列表子项-item-布局" class="headerlink" title="更改列表子项 item 布局"></a>更改列表子项 item 布局</h6><p>这种方式设置的其实不是 RecyclerView 组件的分割线，只是更改了 item 的布局文件，在视觉效果上达到了分割线的效果。</p>
<p>item 的布局文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:background&#x3D;&quot;@android:color&#x2F;white&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;tvData&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_margin&#x3D;&quot;10dp&quot;</span><br><span class="line">        android:textColor&#x3D;&quot;@android:color&#x2F;black&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;viewDivider&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;1dp&quot;</span><br><span class="line">        android:background&#x3D;&quot;@android:color&#x2F;holo_red_dark&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>这里在原有文件的基础上，新增了 View 组件，用于实现视觉效果上的分割线。</p>
<p>可设置水平分割线的高度及颜色，更改 View 组件的相关属性即可。</p>
<p>这样的设置方法，在列表的最后一项是带有分割线的，需要在 adapter 的数据与视图进行绑定的方法中，控制 View 组件的显示与隐藏：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 将数据与 item 视图进行绑定</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Override</span><br><span class="line">public void onBindViewHolder(@NonNull RecyclerViewTestViewHolder holder, int position) &#123;</span><br><span class="line">    &#x2F;&#x2F;最后一项 item 不显示分割线</span><br><span class="line">    if (position &#x3D;&#x3D; testDataList.size() - 1) &#123;</span><br><span class="line">        holder.viewDivider.setVisibility(View.GONE);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        holder.viewDivider.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line">    holder.tvData.setText(testDataList.get(position));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-RecyclerView-分割线设置方式二"><a href="#2-RecyclerView-分割线设置方式二" class="headerlink" title="2 RecyclerView 分割线设置方式二"></a>2 RecyclerView 分割线设置方式二</h1><h6 id="使用-Android-自带的分割线"><a href="#使用-Android-自带的分割线" class="headerlink" title="使用 Android 自带的分割线"></a>使用 Android 自带的分割线</h6><p>RecyclerView 提供了 addItemDecoration(@NonNull ItemDecoration decor) 方法，可用于设置系统默认分割线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void addItemDecoration(@NonNull ItemDecoration decor) &#123;</span><br><span class="line">    addItemDecoration(decor, -1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给 RecyclerView 添加分割线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rvTest.addItemDecoration(new DividerItemDecoration(this, DividerItemDecoration.VERTICAL));</span><br></pre></td></tr></table></figure>
<p>这里的 DividerItemDecoration 采用的是 RecyclerView 组件的背景色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:background&#x3D;&quot;@color&#x2F;app_bg&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;rvTest&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;@android:color&#x2F;holo_red_dark&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190907145121583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>采用这种方式设置的分割线的高度是系统默认的，我们无法修改分割线的高度。</p>
<h6 id="为了方便修改分割线的高度、颜色，DividerItemDecoration-类提供了-setDrawable-方法，供开发者自定义分割线。"><a href="#为了方便修改分割线的高度、颜色，DividerItemDecoration-类提供了-setDrawable-方法，供开发者自定义分割线。" class="headerlink" title="为了方便修改分割线的高度、颜色，DividerItemDecoration 类提供了 setDrawable() 方法，供开发者自定义分割线。"></a>为了方便修改分割线的高度、颜色，DividerItemDecoration 类提供了 setDrawable() 方法，供开发者自定义分割线。</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Sets the &#123;@link Drawable&#125; for this divider.</span><br><span class="line"> *</span><br><span class="line"> * @param drawable Drawable that should be used as a divider.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public void setDrawable(@NonNull Drawable drawable) &#123;</span><br><span class="line">    if (drawable &#x3D;&#x3D; null) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Drawable cannot be null.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    mDivider &#x3D; drawable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建 Drawable 资源文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:shape&#x3D;&quot;rectangle&quot;&gt;</span><br><span class="line">    &lt;solid android:color&#x3D;&quot;@android:color&#x2F;holo_blue_bright&quot; &#x2F;&gt;</span><br><span class="line">    &lt;size android:height&#x3D;&quot;4dp&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;shape&gt;</span><br></pre></td></tr></table></figure>
<p>为 RecyclerView 设置自定义的分割线样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DividerItemDecoration dividerItemDecoration &#x3D; new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);</span><br><span class="line">dividerItemDecoration.setDrawable(getResources().getDrawable(R.drawable.shape_recycler_view_divider));</span><br><span class="line">rvTest.addItemDecoration(dividerItemDecoration);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190907145509496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>稍微复杂一点的，可以为分割线定义渐变色，修改 Drawable 资源文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:shape&#x3D;&quot;rectangle&quot;&gt;</span><br><span class="line">    &lt;gradient</span><br><span class="line">        android:centerColor&#x3D;&quot;@android:color&#x2F;holo_blue_bright&quot;</span><br><span class="line">        android:endColor&#x3D;&quot;@android:color&#x2F;background_dark&quot;</span><br><span class="line">        android:startColor&#x3D;&quot;@android:color&#x2F;holo_red_dark&quot; &#x2F;&gt;</span><br><span class="line">    &lt;size android:height&#x3D;&quot;4dp&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;shape&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190907145942185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="3-RecyclerView-分割线设置方式三"><a href="#3-RecyclerView-分割线设置方式三" class="headerlink" title="3 RecyclerView 分割线设置方式三"></a>3 RecyclerView 分割线设置方式三</h1><h6 id="利用-item-与-RecyclerView-之间的-Margin，达到显示分割线的效果，分割线的颜色为-RecyclerView-的背景色。"><a href="#利用-item-与-RecyclerView-之间的-Margin，达到显示分割线的效果，分割线的颜色为-RecyclerView-的背景色。" class="headerlink" title="利用 item 与 RecyclerView 之间的 Margin，达到显示分割线的效果，分割线的颜色为 RecyclerView 的背景色。"></a>利用 item 与 RecyclerView 之间的 Margin，达到显示分割线的效果，分割线的颜色为 RecyclerView 的背景色。</h6><p>在 RecyclerView 适配器中的 onCreateViewHolder()方法中，加载 item 布局时进行设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 加载 item 的布局文件</span><br><span class="line"> *&#x2F;</span><br><span class="line">@NonNull</span><br><span class="line">@Override</span><br><span class="line">public RecyclerViewTestViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;</span><br><span class="line">    View view &#x3D; LayoutInflater.from(mContext).inflate(R.layout.item_recycler_view_test, parent, false);</span><br><span class="line">    RecyclerView.LayoutParams layoutParams &#x3D; (RecyclerView.LayoutParams) view.getLayoutParams();</span><br><span class="line">    layoutParams.bottomMargin &#x3D; 10;</span><br><span class="line">    view.setLayoutParams(layoutParams);</span><br><span class="line">    return new RecyclerViewTestViewHolder(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190907151552852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1poYWlLdW42OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="4-RecyclerView-分割线设置方式四"><a href="#4-RecyclerView-分割线设置方式四" class="headerlink" title="4 RecyclerView 分割线设置方式四"></a>4 RecyclerView 分割线设置方式四</h1><p>在之前提到的使用 Android 默认的方式来设置分割线的方法中，可以看到 DividerItemDecoration 类继承了 RecyclerView.ItemDecoration，那么我们也可以继承 RecyclerView.ItemDecoration，从而实现自己的分割线。</p>
<p>先看下源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * An ItemDecoration allows the application to add a special drawing and layout offset</span><br><span class="line"> * to specific item views from the adapter&#39;s data set. This can be useful for drawing dividers</span><br><span class="line"> * between items, highlights, visual grouping boundaries and more.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;All ItemDecorations are drawn in the order they were added, before the item</span><br><span class="line"> * views (in &#123;@link ItemDecoration#onDraw(Canvas, RecyclerView, RecyclerView.State) onDraw()&#125;</span><br><span class="line"> * and after the items (in &#123;@link ItemDecoration#onDrawOver(Canvas, RecyclerView,</span><br><span class="line"> * RecyclerView.State)&#125;.&lt;&#x2F;p&gt;</span><br><span class="line"> *&#x2F;</span><br><span class="line">public abstract static class ItemDecoration &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Draw any appropriate decorations into the Canvas supplied to the RecyclerView.</span><br><span class="line">     * Any content drawn by this method will be drawn before the item views are drawn,</span><br><span class="line">     * and will thus appear underneath the views.</span><br><span class="line">     *</span><br><span class="line">     * @param c Canvas to draw into</span><br><span class="line">     * @param parent RecyclerView this ItemDecoration is drawing into</span><br><span class="line">     * @param state The current state of RecyclerView</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull State state) &#123;</span><br><span class="line">        onDraw(c, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @deprecated</span><br><span class="line">     * Override &#123;@link #onDraw(Canvas, RecyclerView, RecyclerView.State)&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Draw any appropriate decorations into the Canvas supplied to the RecyclerView.</span><br><span class="line">     * Any content drawn by this method will be drawn after the item views are drawn</span><br><span class="line">     * and will thus appear over the views.</span><br><span class="line">     *</span><br><span class="line">     * @param c Canvas to draw into</span><br><span class="line">     * @param parent RecyclerView this ItemDecoration is drawing into</span><br><span class="line">     * @param state The current state of RecyclerView.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void onDrawOver(@NonNull Canvas c, @NonNull RecyclerView parent,</span><br><span class="line">            @NonNull State state) &#123;</span><br><span class="line">        onDrawOver(c, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @deprecated</span><br><span class="line">     * Override &#123;@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public void onDrawOver(@NonNull Canvas c, @NonNull RecyclerView parent) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @deprecated</span><br><span class="line">     * Use &#123;@link #getItemOffsets(Rect, View, RecyclerView, State)&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public void getItemOffsets(@NonNull Rect outRect, int itemPosition,</span><br><span class="line">            @NonNull RecyclerView parent) &#123;</span><br><span class="line">        outRect.set(0, 0, 0, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Retrieve any offsets for the given item. Each field of &lt;code&gt;outRect&lt;&#x2F;code&gt; specifies</span><br><span class="line">     * the number of pixels that the item view should be inset by, similar to padding or margin.</span><br><span class="line">     * The default implementation sets the bounds of outRect to 0 and returns.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * If this ItemDecoration does not affect the positioning of item views, it should set</span><br><span class="line">     * all four fields of &lt;code&gt;outRect&lt;&#x2F;code&gt; (left, top, right, bottom) to zero</span><br><span class="line">     * before returning.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * If you need to access Adapter for additional data, you can call</span><br><span class="line">     * &#123;@link RecyclerView#getChildAdapterPosition(View)&#125; to get the adapter position of the</span><br><span class="line">     * View.</span><br><span class="line">     *</span><br><span class="line">     * @param outRect Rect to receive the output.</span><br><span class="line">     * @param view    The child view to decorate</span><br><span class="line">     * @param parent  RecyclerView this ItemDecoration is decorating</span><br><span class="line">     * @param state   The current state of RecyclerView.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view,</span><br><span class="line">            @NonNull RecyclerView parent, @NonNull State state) &#123;</span><br><span class="line">        getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</span><br><span class="line">                parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ItemDecoration  类包含了三个主要的方法：onDraw()、onDrawOver()、getItemOffsets()</p>
]]></content>
      <categories>
        <category>Android开发基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>RecycleView</tag>
        <tag>分割线</tag>
        <tag>divider</tag>
      </tags>
  </entry>
  <entry>
    <title>IM即时通讯</title>
    <url>/2020/11/24/third-party-im/</url>
    <content><![CDATA[<p><a href="http://www.chiefmore.com/yuntongxun/3643.jhtml">国内主流IM即时通讯平台综合评测</a></p>
<h1 id="1-网易云信"><a href="#1-网易云信" class="headerlink" title="1 网易云信"></a>1 网易云信</h1><p><a href="https://netease.im/">https://netease.im/</a></p>
<h1 id="2-环信"><a href="#2-环信" class="headerlink" title="2 环信"></a>2 环信</h1><p><a href="https://www.easemob.com/">https://www.easemob.com/</a></p>
<h1 id="3-融云"><a href="#3-融云" class="headerlink" title="3 融云"></a>3 融云</h1><p><a href="https://www.rongcloud.cn/">https://www.rongcloud.cn/</a></p>
<h1 id="4-极光"><a href="#4-极光" class="headerlink" title="4 极光"></a>4 极光</h1><p><a href="https://www.jiguang.cn/">https://www.jiguang.cn/</a></p>
<h1 id="5-容联云通讯"><a href="#5-容联云通讯" class="headerlink" title="5 容联云通讯"></a>5 容联云通讯</h1><p><a href="https://www.yuntongxun.com/">https://www.yuntongxun.com/</a></p>
<h1 id="6-LeanCloud"><a href="#6-LeanCloud" class="headerlink" title="6 LeanCloud"></a>6 LeanCloud</h1><p><a href="https://leancloud.cn/">https://leancloud.cn/</a></p>
<h1 id="7-亲加通讯云"><a href="#7-亲加通讯云" class="headerlink" title="7 亲加通讯云"></a>7 亲加通讯云</h1><p><a href="http://www.gotye.com.cn/">http://www.gotye.com.cn/</a></p>
<h1 id="8-aurora-imui-通用的即时通讯（IM）UI-库"><a href="#8-aurora-imui-通用的即时通讯（IM）UI-库" class="headerlink" title="8 aurora-imui 通用的即时通讯（IM）UI 库"></a>8 aurora-imui 通用的即时通讯（IM）UI 库</h1><p>Aurora IMUI 是个通用的即时通讯（IM）UI 库，不特定于任何 IM SDK。</p>
<p>本 UI 库提供了消息列表、输入视图等常用组件，支持常见的消息类型：文字、图片、语音、视频等。默认包含多套界面风格，也能根据自己的需要自定义。</p>
<p>项目地址：<a href="https://github.com/jpush/aurora-imui/blob/master/README_zh.md">https://github.com/jpush/aurora-imui/blob/master/README_zh.md</a></p>
<h1 id="9-国内主流IM即时通讯平台综合评测"><a href="#9-国内主流IM即时通讯平台综合评测" class="headerlink" title="9 国内主流IM即时通讯平台综合评测"></a>9 国内主流IM即时通讯平台综合评测</h1><blockquote>
<p>相关参考资料来源于 企业服务汇<br><a href="http://www.chiefmore.com/yuntongxun/3643.jhtml"> http://www.chiefmore.com/yuntongxun/3643.jhtml</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>服务平台</th>
<th>IM即时通讯功能服务与性能</th>
<th>IM即时通讯功能接入与部署方式</th>
<th>IM即时通讯功能收费</th>
</tr>
</thead>
<tbody><tr>
<td><strong>环信</strong></td>
<td>目前环信可以提供比==较完善的人与人之间的聊天与消息功能==，不过在==人与智能机器人聊天方面仅支持最基础的机器人服务，适用于在线客服类产品==，在这一点上与容联云通讯和网易云信相比有一定的不足。</td>
<td>在这四家服务商中，环信==唯一提供React Native demo接口来方便企业集成实现其IM功能==，这对于一些==使用JavaScript和React来开发原生的iOS和Android产品应用的企业来说十分友好==，它可以帮助企业有效提升产品IM功能的开发效率；另外环信支持上述全部的公有云、私有云、专有云、托管云以及海外部署方式，==企业在部署时面临的选择性非常灵活==。</td>
<td>目前环信、容联云通讯、极光推送、网易云信这四家云通讯平台，在IM即时通讯功能的收费价格方面，均按照基础IM功能（通常按照产品日活数收费）、增值IM功能（最典型的是实时音视频通话功能，按照使用分钟数收费）以及扩展IM功能分别进行收费。企业在选购时，需要根据自己的产品类型、实际需要的IM即时通讯功能以及实际的产品日活数来进行综合选择。</td>
</tr>
<tr>
<td>容联云通讯</td>
<td>目前容联云通讯提供==非常丰富的聊天与消息功能== ，==支持人与智能机器之间的单聊、群聊以及闲聊语料、天气查询等个性化聊天功能==，可有效提升用户使用体验和产品活跃度；不过容联云通讯在==性能水平方面，目前暂不支持智能反垃圾服务和敏感词过滤服务==，企业对于用户在聊天过程中产生的消息可能无法做到有效的实时监控，从而==不利于企业构建良好的网络聊天环境==。</td>
<td>目前容联云通讯==仅支持最基础的接入方式==，并且还==支持专有云部署方式==，与其他服务商相比并无特别之处。</td>
<td>目前环信、容联云通讯、极光推送、网易云信这四家云通讯平台，在IM即时通讯功能的收费价格方面，均按照基础IM功能（通常按照产品日活数收费）、增值IM功能（最典型的是实时音视频通话功能，按照使用分钟数收费）以及扩展IM功能分别进行收费。企业在选购时，需要根据自己的产品类型、实际需要的IM即时通讯功能以及实际的产品日活数来进行综合选择。</td>
</tr>
<tr>
<td>极光</td>
<td>目前极光推送==不提供聊天室功能（在视频直播类产品中经常用到）、实时音视频通话功能（在熟人社交/在线教育/在线医疗等需要直接通话才能实现有效沟通的产品中经常用到）以及人与智能机器人聊天等功能==，==仅可以为企业提供最基础的聊天与消息功能==，与其他服务商相比具有较为明显的不足，因此==仅能够满足企业产品最基本的IM即时通讯需求，适用于有轻量级的IM即时通讯功能需求的企业==。</td>
<td>目前与其他三家服务商相比，极光推送==支持的接入与部署方式均是最少的==，在这一点上有一定的不足。</td>
<td>目前环信、容联云通讯、极光推送、网易云信这四家云通讯平台，在IM即时通讯功能的收费价格方面，均按照基础IM功能（通常按照产品日活数收费）、增值IM功能（最典型的是实时音视频通话功能，按照使用分钟数收费）以及扩展IM功能分别进行收费。企业在选购时，需要根据自己的产品类型、实际需要的IM即时通讯功能以及实际的产品日活数来进行综合选择。</td>
</tr>
<tr>
<td><strong>网易云信</strong></td>
<td>与其他三家服务商相比，目前==网易云信提供的IM聊天与消息功能最为完善==，并且网易云信还==唯一支持用户托管==功能，可以帮助企业有效维护闲置的用户资料/关系；另外网易云信提供的==人与智能机器人聊天功能也比较丰富==，也支持人机之间的单聊、群聊等功能，==适用于在线教育、企业协同办公以及智能客服等产品==。</td>
<td>目前网易云信与其他三家服务商相比，==支持的接入方式最为全面==，并且==唯一支持macOS、Cocos-2d和Unity这三个平台系统的接入==，在这一点有较大的竞争优势。</td>
<td>目前环信、容联云通讯、极光推送、网易云信这四家云通讯平台，在IM即时通讯功能的收费价格方面，均按照基础IM功能（通常按照产品日活数收费）、增值IM功能（最典型的是实时音视频通话功能，按照使用分钟数收费）以及扩展IM功能分别进行收费。企业在选购时，需要根据自己的产品类型、实际需要的IM即时通讯功能以及实际的产品日活数来进行综合选择。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>服务平台</th>
<th>IM即时通讯功能服务与性能</th>
<th>IM即时通讯功能接入与部署方式</th>
<th>IM即时通讯功能收费</th>
</tr>
</thead>
<tbody><tr>
<td><strong>融云</strong></td>
<td>与其他两家服务商相比，==融云唯一提供非常完整的实时音视频通话功能，并且支持企业基于此功能实现视频会议功能，在这一点融云有着较大的竞争优势==。同时融云还支持==在后台为企业提供完善的后台数据统计功能==，方便企业直接查看用户活跃以及费用消耗方面的数据。</td>
<td>与其他两家服务商相比，目前融云==唯一支持macOS、Linux等平台系统的接入==，对于基于这两大平台开发产品的企业非常友好，企业可以实现快速接入；另外融云也==可以单独提供专有云部署服务==，通过为企业提供专有的服务集群和海外数据中心，来充分满足企业的特殊需求，企业在部署方式方面选择性很强。</td>
<td>目前融云、LeanCloud、亲加通讯云这三家云通讯平台，在IM即时通讯功能的收费价格方面，其收费方式和收费标准各不一样，具体如下：融云主要是按照产品日活数按月收费；LeanCloud主要是按照产品日活数按天收费（其中美国和中国分别收费）；而亲加通讯云因为本身仅专注于为企业的视频直播和游戏类产品提供服务，因此按照直播时的使用带宽峰值以及产品日活数分别收费。企业在选购时，需要明确自己产品的类型、需要的IM即时通讯功能以及目前比较稳定的产品日活数来综合对比进行选择。</td>
</tr>
<tr>
<td>LeanCloud</td>
<td>目前LeanCloud==不支持实时音视频通话功能==，仅为企业==提供最基础的聊天服务==；同时LeanCloud在海外仅支持美国用户使用其服务，不支持全球范围内的其他国家或地区使用，与另外两家服务商相比有一定的不足。</td>
<td>目前LeanCloud仅==支持最基础最常见的接入与部署方式==，与其他两家服务商相比表现较为一般。</td>
<td>目前融云、LeanCloud、亲加通讯云这三家云通讯平台，在IM即时通讯功能的收费价格方面，其收费方式和收费标准各不一样，具体如下：融云主要是按照产品日活数按月收费；LeanCloud主要是按照产品日活数按天收费（其中美国和中国分别收费）；而亲加通讯云因为本身仅专注于为企业的视频直播和游戏类产品提供服务，因此按照直播时的使用带宽峰值以及产品日活数分别收费。企业在选购时，需要明确自己产品的类型、需要的IM即时通讯功能以及目前比较稳定的产品日活数来综合对比进行选择。</td>
</tr>
<tr>
<td>亲加通讯云</td>
<td>亲加通讯云与其他两家服务商最大的不同在于——亲加通讯云本身==仅专注于为企业的视频直播以及游戏类产品提供IM即时通讯服务==，这一点企业在选购时需要特别注意。另外亲加通讯云==可以为企业提供最基础的聊天功能以及实时音频通话功能==，通常==适用于游戏类的产品==。</td>
<td>与其他两家服务商相比，目前亲加通讯云==最大的不同在于——在接入方式上唯一支持Unity和Cocos-2d这两大手游引擎的接入，因此非常适用于开发游戏类产品的企业==。</td>
<td>目前融云、LeanCloud、亲加通讯云这三家云通讯平台，在IM即时通讯功能的收费价格方面，其收费方式和收费标准各不一样，具体如下：融云主要是按照产品日活数按月收费；LeanCloud主要是按照产品日活数按天收费（其中美国和中国分别收费）；而亲加通讯云因为本身仅专注于为企业的视频直播和游戏类产品提供服务，因此按照直播时的使用带宽峰值以及产品日活数分别收费。企业在选购时，需要明确自己产品的类型、需要的IM即时通讯功能以及目前比较稳定的产品日活数来综合对比进行选择。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>第三方开发API</category>
      </categories>
      <tags>
        <tag>即时通讯</tag>
        <tag>网易云信</tag>
        <tag>环信</tag>
        <tag>融云</tag>
      </tags>
  </entry>
  <entry>
    <title>Valine评论插件报错：Code 403</title>
    <url>/2020/11/17/valine-code-403/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用 Hexo 搭建博客过程中，集成了 Valine 评论插件，本地使用时正常，将项目部署至静态网站后，Valine 插件在页面使用处提示 Code 403错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Code 403: Access denied by API domain white list, Please check your security domain.</span><br></pre></td></tr></table></figure>

<p>大致意思是：访问被api域名白名单拒绝，请检查你的安全域名设置</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在 <a href="https://www.leancloud.cn/">LeanCloud</a> 的【应用 &gt; 设置 &gt; 安全中心 &gt; Web安全域名】中添加新的自定义域名即可解决该问题。</p>
<p>此处【新的自定义域名】指的是：你的博客的访问域名。</p>
<p><strong>安全域名的具体添加方式根据 LeanCloud 的要求添加即可。</strong><br><img src="/imgs/valine-code-403-doman.png"></p>
]]></content>
      <categories>
        <category>Hexo配置问题汇总</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Valine插件</tag>
        <tag>Code 403</tag>
      </tags>
  </entry>
  <entry>
    <title>Android WebView 加载闪退问题处理（Error inflating class android.webkit.WebView）</title>
    <url>/2020/11/24/webview-load-crash/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在布局文件中直接使用 WebView ，Activity 运行时，APP崩溃</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:background&#x3D;&quot;@color&#x2F;appBg&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;WebView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;webView&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h2 id="关键异常"><a href="#关键异常" class="headerlink" title="关键异常"></a>关键异常</h2><p>1 Caused by: android.view.InflateException: Binary XML file line #8: Error inflating class android.webkit.WebView</p>
<p>2 Caused by: android.content.res.Resources$NotFoundException: String resource ID #0x2040003</p>
<h1 id="异常问题分析"><a href="#异常问题分析" class="headerlink" title="异常问题分析"></a>异常问题分析</h1><p>简要概述为：</p>
<p>系统 WebView 出现了问题</p>
<p>一般是特殊机型或刷机后导致系统WebView被卸载或文件缺失的情况</p>
<p>也有者为系统WebView为64位的，并不支持</p>
<p>推荐以下两篇博客，写的很详细</p>
<p><a href="https://blog.csdn.net/hmmhhmmhmhhm/article/details/78072108">解决用WebView去加载网页在部分手机上闪退问题</a></p>
<p><a href="https://stackoverflow.com/questions/41025200/android-view-inflateexception-error-inflating-class-android-webkit-webview">android.view.InflateException Error inflating class android.webkit.WebView</a></p>
<h1 id="解决方案汇总"><a href="#解决方案汇总" class="headerlink" title="解决方案汇总"></a>解决方案汇总</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>在 app 下的 build.gradle 配置文件中，将 androidx.appcompat:appcompat 的版本改为 1.0.2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &#39;androidx.appcompat:appcompat:1.0.2&#39;</span><br></pre></td></tr></table></figure>
<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>在 AndroidManifest.xml 文件的 application 标签下增加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">           android:name&#x3D;&quot;android.webkit.WebView.EnableSafeBrowsing&quot;</span><br><span class="line">           android:value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>使用第三方的浏览器内核</p>
<p>如腾讯提供的浏览器内核SDK</p>
]]></content>
      <categories>
        <category>Android开发问题汇总</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Webview</tag>
        <tag>加载闪退问题处理</tag>
        <tag>崩溃</tag>
      </tags>
  </entry>
</search>
